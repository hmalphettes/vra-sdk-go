// Code generated by go-swagger; DO NOT EDIT.

package executions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new executions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for executions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUsingDELETE10 deletes a user operation by id

Delete a User Operation with the given id
*/
func (a *Client) DeleteUsingDELETE10(params *DeleteUsingDELETE10Params) (*DeleteUsingDELETE10OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE10Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_10",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/user-operations/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE10Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE10OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_10: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE3 deletes an execution by id

Delete an Execution
*/
func (a *Client) DeleteUsingDELETE3(params *DeleteUsingDELETE3Params) (*DeleteUsingDELETE3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET1 gets all executions

Get all Executions with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET1(params *GetAllUsingGET1Params) (*GetAllUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET4 gets all user operations

Get all User operations with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET4(params *GetAllUsingGET4Params) (*GetAllUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsingGET_4",
		Method:             "GET",
		PathPattern:        "/codestream/api/user-operations",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET1 gets an execution

Get an Execution by id
*/
func (a *Client) GetUsingGET1(params *GetUsingGET1Params) (*GetUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET4 gets a user operation

Get a User Operation with the given id
*/
func (a *Client) GetUsingGET4(params *GetUsingGET4Params) (*GetUsingGET4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_4",
		Method:             "GET",
		PathPattern:        "/codestream/api/user-operations/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyExecutionUsingPOST acts on an execution

Actions supported are pause, resume, cancel and tag
*/
func (a *Client) ModifyExecutionUsingPOST(params *ModifyExecutionUsingPOSTParams) (*ModifyExecutionUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyExecutionUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyExecutionUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/executions/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyExecutionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyExecutionUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyExecutionUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyPatchUserOperationUsingPATCH modifies a user operation

Modify a User Operation with the given id
*/
func (a *Client) ModifyPatchUserOperationUsingPATCH(params *ModifyPatchUserOperationUsingPATCHParams) (*ModifyPatchUserOperationUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPatchUserOperationUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyPatchUserOperationUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/user-operations/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyPatchUserOperationUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyPatchUserOperationUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyPatchUserOperationUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModifyPostUserOperationUsingPOST modifies a user operation

Modify a User Operation with the given id
*/
func (a *Client) ModifyPostUserOperationUsingPOST(params *ModifyPostUserOperationUsingPOSTParams) (*ModifyPostUserOperationUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyPostUserOperationUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyPostUserOperationUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/user-operations/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyPostUserOperationUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModifyPostUserOperationUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for modifyPostUserOperationUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
