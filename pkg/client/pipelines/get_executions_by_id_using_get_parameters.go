// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetExecutionsByIDUsingGETParams creates a new GetExecutionsByIDUsingGETParams object
// with the default values initialized.
func NewGetExecutionsByIDUsingGETParams() *GetExecutionsByIDUsingGETParams {
	var (
		dollarOrderbyDefault = string("name desc")
		dollarSkipDefault    = string("0")
		dollarTopDefault     = string("25")
		pageDefault          = string("0")
	)
	return &GetExecutionsByIDUsingGETParams{
		DollarOrderby: &dollarOrderbyDefault,
		DollarSkip:    &dollarSkipDefault,
		DollarTop:     &dollarTopDefault,
		Page:          &pageDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetExecutionsByIDUsingGETParamsWithTimeout creates a new GetExecutionsByIDUsingGETParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetExecutionsByIDUsingGETParamsWithTimeout(timeout time.Duration) *GetExecutionsByIDUsingGETParams {
	var (
		dollarOrderbyDefault = string("name desc")
		dollarSkipDefault    = string("0")
		dollarTopDefault     = string("25")
		pageDefault          = string("0")
	)
	return &GetExecutionsByIDUsingGETParams{
		DollarOrderby: &dollarOrderbyDefault,
		DollarSkip:    &dollarSkipDefault,
		DollarTop:     &dollarTopDefault,
		Page:          &pageDefault,

		timeout: timeout,
	}
}

// NewGetExecutionsByIDUsingGETParamsWithContext creates a new GetExecutionsByIDUsingGETParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetExecutionsByIDUsingGETParamsWithContext(ctx context.Context) *GetExecutionsByIDUsingGETParams {
	var (
		dollarOrderbyDefault = string("name desc")
		dollarSkipDefault    = string("0")
		dollarTopDefault     = string("25")
		pageDefault          = string("0")
	)
	return &GetExecutionsByIDUsingGETParams{
		DollarOrderby: &dollarOrderbyDefault,
		DollarSkip:    &dollarSkipDefault,
		DollarTop:     &dollarTopDefault,
		Page:          &pageDefault,

		Context: ctx,
	}
}

// NewGetExecutionsByIDUsingGETParamsWithHTTPClient creates a new GetExecutionsByIDUsingGETParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetExecutionsByIDUsingGETParamsWithHTTPClient(client *http.Client) *GetExecutionsByIDUsingGETParams {
	var (
		dollarOrderbyDefault = string("name desc")
		dollarSkipDefault    = string("0")
		dollarTopDefault     = string("25")
		pageDefault          = string("0")
	)
	return &GetExecutionsByIDUsingGETParams{
		DollarOrderby: &dollarOrderbyDefault,
		DollarSkip:    &dollarSkipDefault,
		DollarTop:     &dollarTopDefault,
		Page:          &pageDefault,
		HTTPClient:    client,
	}
}

/*GetExecutionsByIDUsingGETParams contains all the parameters to send to the API endpoint
for the get executions by Id using g e t operation typically these are written to a http.Request
*/
type GetExecutionsByIDUsingGETParams struct {

	/*DollarFilter
	  To list with OData like filter

	*/
	DollarFilter *string
	/*DollarOrderby
	  Order by attribute

	*/
	DollarOrderby *string
	/*DollarSkip
	  To skip 'n' Executions for listing

	*/
	DollarSkip *string
	/*DollarTop
	  To list top 'n' Executions for listing

	*/
	DollarTop *string
	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about

	*/
	APIVersion string
	/*ID
	  The ID of the Pipeline

	*/
	ID string
	/*Page
	  To select 'n'th page for listing

	*/
	Page *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithTimeout(timeout time.Duration) *GetExecutionsByIDUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithContext(ctx context.Context) *GetExecutionsByIDUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithHTTPClient(client *http.Client) *GetExecutionsByIDUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDollarFilter adds the dollarFilter to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithDollarFilter(dollarFilter *string) *GetExecutionsByIDUsingGETParams {
	o.SetDollarFilter(dollarFilter)
	return o
}

// SetDollarFilter adds the dollarFilter to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetDollarFilter(dollarFilter *string) {
	o.DollarFilter = dollarFilter
}

// WithDollarOrderby adds the dollarOrderby to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithDollarOrderby(dollarOrderby *string) *GetExecutionsByIDUsingGETParams {
	o.SetDollarOrderby(dollarOrderby)
	return o
}

// SetDollarOrderby adds the dollarOrderby to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetDollarOrderby(dollarOrderby *string) {
	o.DollarOrderby = dollarOrderby
}

// WithDollarSkip adds the dollarSkip to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithDollarSkip(dollarSkip *string) *GetExecutionsByIDUsingGETParams {
	o.SetDollarSkip(dollarSkip)
	return o
}

// SetDollarSkip adds the dollarSkip to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetDollarSkip(dollarSkip *string) {
	o.DollarSkip = dollarSkip
}

// WithDollarTop adds the dollarTop to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithDollarTop(dollarTop *string) *GetExecutionsByIDUsingGETParams {
	o.SetDollarTop(dollarTop)
	return o
}

// SetDollarTop adds the dollarTop to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetDollarTop(dollarTop *string) {
	o.DollarTop = dollarTop
}

// WithAPIVersion adds the aPIVersion to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithAPIVersion(aPIVersion string) *GetExecutionsByIDUsingGETParams {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithID adds the id to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithID(id string) *GetExecutionsByIDUsingGETParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetID(id string) {
	o.ID = id
}

// WithPage adds the page to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) WithPage(page *string) *GetExecutionsByIDUsingGETParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get executions by Id using get params
func (o *GetExecutionsByIDUsingGETParams) SetPage(page *string) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetExecutionsByIDUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DollarFilter != nil {

		// query param $filter
		var qrDollarFilter string
		if o.DollarFilter != nil {
			qrDollarFilter = *o.DollarFilter
		}
		qDollarFilter := qrDollarFilter
		if qDollarFilter != "" {
			if err := r.SetQueryParam("$filter", qDollarFilter); err != nil {
				return err
			}
		}

	}

	if o.DollarOrderby != nil {

		// query param $orderby
		var qrDollarOrderby string
		if o.DollarOrderby != nil {
			qrDollarOrderby = *o.DollarOrderby
		}
		qDollarOrderby := qrDollarOrderby
		if qDollarOrderby != "" {
			if err := r.SetQueryParam("$orderby", qDollarOrderby); err != nil {
				return err
			}
		}

	}

	if o.DollarSkip != nil {

		// query param $skip
		var qrDollarSkip string
		if o.DollarSkip != nil {
			qrDollarSkip = *o.DollarSkip
		}
		qDollarSkip := qrDollarSkip
		if qDollarSkip != "" {
			if err := r.SetQueryParam("$skip", qDollarSkip); err != nil {
				return err
			}
		}

	}

	if o.DollarTop != nil {

		// query param $top
		var qrDollarTop string
		if o.DollarTop != nil {
			qrDollarTop = *o.DollarTop
		}
		qDollarTop := qrDollarTop
		if qDollarTop != "" {
			if err := r.SetQueryParam("$top", qDollarTop); err != nil {
				return err
			}
		}

	}

	// query param apiVersion
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
