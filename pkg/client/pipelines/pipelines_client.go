// Code generated by go-swagger; DO NOT EDIT.

package pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new pipelines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pipelines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ActOnPipelineUsingPOST clones a pipeline

Clone a Pipeline with the given id
*/
func (a *Client) ActOnPipelineUsingPOST(params *ActOnPipelineUsingPOSTParams) (*ActOnPipelineUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActOnPipelineUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "actOnPipelineUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ActOnPipelineUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActOnPipelineUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for actOnPipelineUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUsingPOST3 creates a pipeline

Create a Pipeline based on the given project
*/
func (a *Client) CreateUsingPOST3(params *CreateUsingPOST3Params) (*CreateUsingPOST3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsingPOST_3",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUsingPOST3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUsingPOST4 creates a variable

Creates a Variable based on project name
*/
func (a *Client) CreateUsingPOST4(params *CreateUsingPOST4Params) (*CreateUsingPOST4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsingPOST_4",
		Method:             "POST",
		PathPattern:        "/codestream/api/variables",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUsingPOST4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE11 deletes a variable by Id

Deletes a Variable with the given Id
*/
func (a *Client) DeleteUsingDELETE11(params *DeleteUsingDELETE11Params) (*DeleteUsingDELETE11OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE11Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_11",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/variables/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE11Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE11OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_11: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE12 deletes a variable by project and name

Deletes a Variable with the given name
*/
func (a *Client) DeleteUsingDELETE12(params *DeleteUsingDELETE12Params) (*DeleteUsingDELETE12OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE12Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_12",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/variables/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE12Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE12OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_12: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE8 deletes a pipeline by id

Delete a Pipeline with the given id
*/
func (a *Client) DeleteUsingDELETE8(params *DeleteUsingDELETE8Params) (*DeleteUsingDELETE8OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE8Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_8",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE8Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE8OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_8: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE9 deletes a pipeline by project and name

Delete a Pipeline with the given project and name
*/
func (a *Client) DeleteUsingDELETE9(params *DeleteUsingDELETE9Params) (*DeleteUsingDELETE9OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE9Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_9",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE9Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE9OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_9: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteByNameUsingPOST executes a pipeline

Execute a Pipeline based on the given project and name
*/
func (a *Client) ExecuteByNameUsingPOST(params *ExecuteByNameUsingPOSTParams) (*ExecuteByNameUsingPOSTOK, *ExecuteByNameUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteByNameUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "executeByNameUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecuteByNameUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecuteByNameUsingPOSTOK:
		return value, nil, nil
	case *ExecuteByNameUsingPOSTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExecuteUsingPOST executes a pipeline

Execute a Pipeline based on the given id
*/
func (a *Client) ExecuteUsingPOST(params *ExecuteUsingPOSTParams) (*ExecuteUsingPOSTOK, *ExecuteUsingPOSTAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "executeUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/pipelines/{id}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExecuteUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExecuteUsingPOSTOK:
		return value, nil, nil
	case *ExecuteUsingPOSTAccepted:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportUsingGET exports

Exports a given pipeline and endpoints referred by it or pipelines/ endpoints as 'YAML' in given project
*/
func (a *Client) ExportUsingGET(params *ExportUsingGETParams) (*ExportUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/export",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET3 gets all pipelines

Get all Pipelines with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET3(params *GetAllUsingGET3Params) (*GetAllUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET5 gets all variables

Get all Variables with specified paging and filter parameters.
*/
func (a *Client) GetAllUsingGET5(params *GetAllUsingGET5Params) (*GetAllUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsingGET_5",
		Method:             "GET",
		PathPattern:        "/codestream/api/variables",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionByIndexAndPipelineIDUsingGET gets an execution

Get an Execution based on the given pipeline id and execution index
*/
func (a *Client) GetExecutionByIndexAndPipelineIDUsingGET(params *GetExecutionByIndexAndPipelineIDUsingGETParams) (*GetExecutionByIndexAndPipelineIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionByIndexAndPipelineIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutionByIndexAndPipelineIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}/executions/{index}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionByIndexAndPipelineIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionByIndexAndPipelineIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionByIndexAndPipelineIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionByNameAndIndexUsingGET gets an execution

Get an Execution based on the given pipeline id and execution index
*/
func (a *Client) GetExecutionByNameAndIndexUsingGET(params *GetExecutionByNameAndIndexUsingGETParams) (*GetExecutionByNameAndIndexUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionByNameAndIndexUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutionByNameAndIndexUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions/{index}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionByNameAndIndexUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionByNameAndIndexUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionByNameAndIndexUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionsByIDUsingGET gets all executions of a pipeline

Get all Executions of a Pipeline with specified paging and filter parameters.
*/
func (a *Client) GetExecutionsByIDUsingGET(params *GetExecutionsByIDUsingGETParams) (*GetExecutionsByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutionsByIdUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionsByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionsByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionsByIdUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExecutionsByNameUsingGET gets all executions of a pipeline

Get all Executions of a Pipeline with specified paging and filter parameters.
*/
func (a *Client) GetExecutionsByNameUsingGET(params *GetExecutionsByNameUsingGETParams) (*GetExecutionsByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExecutionsByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getExecutionsByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}/executions",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetExecutionsByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExecutionsByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExecutionsByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineTilesUsingGET gets pipeline tiles

Get Pipeline Tiles
*/
func (a *Client) GetPipelineTilesUsingGET(params *GetPipelineTilesUsingGETParams) (*GetPipelineTilesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineTilesUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPipelineTilesUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipeline-tiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPipelineTilesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineTilesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineTilesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET2 gets a pipeline

Get a Pipeline with the given id
*/
func (a *Client) GetUsingGET2(params *GetUsingGET2Params) (*GetUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_2",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET3 gets a pipeline by project and name

Get a Pipeline with the given project and name
*/
func (a *Client) GetUsingGET3(params *GetUsingGET3Params) (*GetUsingGET3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_3",
		Method:             "GET",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET5 gets a variable

Gets a Variable with the given id
*/
func (a *Client) GetUsingGET5(params *GetUsingGET5Params) (*GetUsingGET5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_5",
		Method:             "GET",
		PathPattern:        "/codestream/api/variables/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsingGET6 gets a variable by project and name

Get an Variable with the given project and name
*/
func (a *Client) GetUsingGET6(params *GetUsingGET6Params) (*GetUsingGET6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsingGET6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsingGET_6",
		Method:             "GET",
		PathPattern:        "/codestream/api/variables/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUsingGET6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsingGET6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsingGET_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImportYamlUsingPOST imports

Imports pipeline/endpoint and other models to Codestream
*/
func (a *Client) ImportYamlUsingPOST(params *ImportYamlUsingPOSTParams) (*ImportYamlUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportYamlUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importYamlUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/import",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{"application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ImportYamlUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportYamlUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for importYamlUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchUsingPATCH updates a pipeline by id

Update a Pipeline with the given id
*/
func (a *Client) PatchUsingPATCH(params *PatchUsingPATCHParams) (*PatchUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchUsingPATCH1 updates a pipeline by project and name

Update a Pipeline with the given project and name
*/
func (a *Client) PatchUsingPATCH1(params *PatchUsingPATCH1Params) (*PatchUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT2 updates a pipeline by id

Update a Pipeline with the given id
*/
func (a *Client) UpdateUsingPUT2(params *UpdateUsingPUT2Params) (*UpdateUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/pipelines/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT3 updates a pipeline by project and name

Update a Pipeline with the given project and name
*/
func (a *Client) UpdateUsingPUT3(params *UpdateUsingPUT3Params) (*UpdateUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/pipelines/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT4 updates a variable by id

Updates a Variable with the given id
*/
func (a *Client) UpdateUsingPUT4(params *UpdateUsingPUT4Params) (*UpdateUsingPUT4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT_4",
		Method:             "PUT",
		PathPattern:        "/codestream/api/variables/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUT4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT5 updates a variable by project and name

Update an Variable with the given project and name
*/
func (a *Client) UpdateUsingPUT5(params *UpdateUsingPUT5Params) (*UpdateUsingPUT5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT_5",
		Method:             "PUT",
		PathPattern:        "/codestream/api/variables/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUT5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
