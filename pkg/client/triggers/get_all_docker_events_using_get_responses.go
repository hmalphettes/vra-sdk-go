// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetAllDockerEventsUsingGETReader is a Reader for the GetAllDockerEventsUsingGET structure.
type GetAllDockerEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllDockerEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllDockerEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllDockerEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllDockerEventsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllDockerEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllDockerEventsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllDockerEventsUsingGETOK creates a GetAllDockerEventsUsingGETOK with default headers values
func NewGetAllDockerEventsUsingGETOK() *GetAllDockerEventsUsingGETOK {
	return &GetAllDockerEventsUsingGETOK{}
}

/*GetAllDockerEventsUsingGETOK handles this case with default header values.

'Success' with get of Docker Registry Events
*/
type GetAllDockerEventsUsingGETOK struct {
	Payload models.DockerRegistryEvents
}

func (o *GetAllDockerEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-events][%d] getAllDockerEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllDockerEventsUsingGETOK) GetPayload() models.DockerRegistryEvents {
	return o.Payload
}

func (o *GetAllDockerEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalDockerRegistryEvents(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetAllDockerEventsUsingGETUnauthorized creates a GetAllDockerEventsUsingGETUnauthorized with default headers values
func NewGetAllDockerEventsUsingGETUnauthorized() *GetAllDockerEventsUsingGETUnauthorized {
	return &GetAllDockerEventsUsingGETUnauthorized{}
}

/*GetAllDockerEventsUsingGETUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetAllDockerEventsUsingGETUnauthorized struct {
}

func (o *GetAllDockerEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-events][%d] getAllDockerEventsUsingGETUnauthorized ", 401)
}

func (o *GetAllDockerEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllDockerEventsUsingGETForbidden creates a GetAllDockerEventsUsingGETForbidden with default headers values
func NewGetAllDockerEventsUsingGETForbidden() *GetAllDockerEventsUsingGETForbidden {
	return &GetAllDockerEventsUsingGETForbidden{}
}

/*GetAllDockerEventsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllDockerEventsUsingGETForbidden struct {
}

func (o *GetAllDockerEventsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-events][%d] getAllDockerEventsUsingGETForbidden ", 403)
}

func (o *GetAllDockerEventsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllDockerEventsUsingGETNotFound creates a GetAllDockerEventsUsingGETNotFound with default headers values
func NewGetAllDockerEventsUsingGETNotFound() *GetAllDockerEventsUsingGETNotFound {
	return &GetAllDockerEventsUsingGETNotFound{}
}

/*GetAllDockerEventsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllDockerEventsUsingGETNotFound struct {
}

func (o *GetAllDockerEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-events][%d] getAllDockerEventsUsingGETNotFound ", 404)
}

func (o *GetAllDockerEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllDockerEventsUsingGETInternalServerError creates a GetAllDockerEventsUsingGETInternalServerError with default headers values
func NewGetAllDockerEventsUsingGETInternalServerError() *GetAllDockerEventsUsingGETInternalServerError {
	return &GetAllDockerEventsUsingGETInternalServerError{}
}

/*GetAllDockerEventsUsingGETInternalServerError handles this case with default header values.

Server Error
*/
type GetAllDockerEventsUsingGETInternalServerError struct {
}

func (o *GetAllDockerEventsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/registry-events][%d] getAllDockerEventsUsingGETInternalServerError ", 500)
}

func (o *GetAllDockerEventsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
