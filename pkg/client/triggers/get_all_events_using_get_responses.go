// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetAllEventsUsingGETReader is a Reader for the GetAllEventsUsingGET structure.
type GetAllEventsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllEventsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllEventsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllEventsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllEventsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllEventsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllEventsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAllEventsUsingGETOK creates a GetAllEventsUsingGETOK with default headers values
func NewGetAllEventsUsingGETOK() *GetAllEventsUsingGETOK {
	return &GetAllEventsUsingGETOK{}
}

/*GetAllEventsUsingGETOK handles this case with default header values.

'Success' with get of gerrit events
*/
type GetAllEventsUsingGETOK struct {
	Payload models.GerritEvents
}

func (o *GetAllEventsUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllEventsUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetAllEventsUsingGETOK) GetPayload() models.GerritEvents {
	return o.Payload
}

func (o *GetAllEventsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritEvents(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetAllEventsUsingGETUnauthorized creates a GetAllEventsUsingGETUnauthorized with default headers values
func NewGetAllEventsUsingGETUnauthorized() *GetAllEventsUsingGETUnauthorized {
	return &GetAllEventsUsingGETUnauthorized{}
}

/*GetAllEventsUsingGETUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetAllEventsUsingGETUnauthorized struct {
}

func (o *GetAllEventsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllEventsUsingGETUnauthorized ", 401)
}

func (o *GetAllEventsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEventsUsingGETForbidden creates a GetAllEventsUsingGETForbidden with default headers values
func NewGetAllEventsUsingGETForbidden() *GetAllEventsUsingGETForbidden {
	return &GetAllEventsUsingGETForbidden{}
}

/*GetAllEventsUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetAllEventsUsingGETForbidden struct {
}

func (o *GetAllEventsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllEventsUsingGETForbidden ", 403)
}

func (o *GetAllEventsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEventsUsingGETNotFound creates a GetAllEventsUsingGETNotFound with default headers values
func NewGetAllEventsUsingGETNotFound() *GetAllEventsUsingGETNotFound {
	return &GetAllEventsUsingGETNotFound{}
}

/*GetAllEventsUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetAllEventsUsingGETNotFound struct {
}

func (o *GetAllEventsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllEventsUsingGETNotFound ", 404)
}

func (o *GetAllEventsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllEventsUsingGETInternalServerError creates a GetAllEventsUsingGETInternalServerError with default headers values
func NewGetAllEventsUsingGETInternalServerError() *GetAllEventsUsingGETInternalServerError {
	return &GetAllEventsUsingGETInternalServerError{}
}

/*GetAllEventsUsingGETInternalServerError handles this case with default header values.

Server Error
*/
type GetAllEventsUsingGETInternalServerError struct {
}

func (o *GetAllEventsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-events][%d] getAllEventsUsingGETInternalServerError ", 500)
}

func (o *GetAllEventsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
