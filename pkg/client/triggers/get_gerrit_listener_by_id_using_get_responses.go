// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGerritListenerByIDUsingGETReader is a Reader for the GetGerritListenerByIDUsingGET structure.
type GetGerritListenerByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGerritListenerByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGerritListenerByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGerritListenerByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGerritListenerByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGerritListenerByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGerritListenerByIDUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGerritListenerByIDUsingGETOK creates a GetGerritListenerByIDUsingGETOK with default headers values
func NewGetGerritListenerByIDUsingGETOK() *GetGerritListenerByIDUsingGETOK {
	return &GetGerritListenerByIDUsingGETOK{}
}

/*GetGerritListenerByIDUsingGETOK handles this case with default header values.

'Success' with gerrit listener
*/
type GetGerritListenerByIDUsingGETOK struct {
	Payload models.GerritListener
}

func (o *GetGerritListenerByIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{id}][%d] getGerritListenerByIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGerritListenerByIDUsingGETOK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *GetGerritListenerByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetGerritListenerByIDUsingGETUnauthorized creates a GetGerritListenerByIDUsingGETUnauthorized with default headers values
func NewGetGerritListenerByIDUsingGETUnauthorized() *GetGerritListenerByIDUsingGETUnauthorized {
	return &GetGerritListenerByIDUsingGETUnauthorized{}
}

/*GetGerritListenerByIDUsingGETUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetGerritListenerByIDUsingGETUnauthorized struct {
}

func (o *GetGerritListenerByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{id}][%d] getGerritListenerByIdUsingGETUnauthorized ", 401)
}

func (o *GetGerritListenerByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritListenerByIDUsingGETForbidden creates a GetGerritListenerByIDUsingGETForbidden with default headers values
func NewGetGerritListenerByIDUsingGETForbidden() *GetGerritListenerByIDUsingGETForbidden {
	return &GetGerritListenerByIDUsingGETForbidden{}
}

/*GetGerritListenerByIDUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetGerritListenerByIDUsingGETForbidden struct {
}

func (o *GetGerritListenerByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{id}][%d] getGerritListenerByIdUsingGETForbidden ", 403)
}

func (o *GetGerritListenerByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritListenerByIDUsingGETNotFound creates a GetGerritListenerByIDUsingGETNotFound with default headers values
func NewGetGerritListenerByIDUsingGETNotFound() *GetGerritListenerByIDUsingGETNotFound {
	return &GetGerritListenerByIDUsingGETNotFound{}
}

/*GetGerritListenerByIDUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetGerritListenerByIDUsingGETNotFound struct {
}

func (o *GetGerritListenerByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{id}][%d] getGerritListenerByIdUsingGETNotFound ", 404)
}

func (o *GetGerritListenerByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGerritListenerByIDUsingGETInternalServerError creates a GetGerritListenerByIDUsingGETInternalServerError with default headers values
func NewGetGerritListenerByIDUsingGETInternalServerError() *GetGerritListenerByIDUsingGETInternalServerError {
	return &GetGerritListenerByIDUsingGETInternalServerError{}
}

/*GetGerritListenerByIDUsingGETInternalServerError handles this case with default header values.

Server Error
*/
type GetGerritListenerByIDUsingGETInternalServerError struct {
}

func (o *GetGerritListenerByIDUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-listeners/{id}][%d] getGerritListenerByIdUsingGETInternalServerError ", 500)
}

func (o *GetGerritListenerByIDUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
