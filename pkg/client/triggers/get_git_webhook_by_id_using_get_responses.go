// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetGitWebhookByIDUsingGETReader is a Reader for the GetGitWebhookByIDUsingGET structure.
type GetGitWebhookByIDUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGitWebhookByIDUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGitWebhookByIDUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetGitWebhookByIDUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGitWebhookByIDUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGitWebhookByIDUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGitWebhookByIDUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetGitWebhookByIDUsingGETOK creates a GetGitWebhookByIDUsingGETOK with default headers values
func NewGetGitWebhookByIDUsingGETOK() *GetGitWebhookByIDUsingGETOK {
	return &GetGitWebhookByIDUsingGETOK{}
}

/*GetGitWebhookByIDUsingGETOK handles this case with default header values.

'Success' with Git Webhook
*/
type GetGitWebhookByIDUsingGETOK struct {
	Payload models.GitWebhook
}

func (o *GetGitWebhookByIDUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{id}][%d] getGitWebhookByIdUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetGitWebhookByIDUsingGETOK) GetPayload() models.GitWebhook {
	return o.Payload
}

func (o *GetGitWebhookByIDUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGitWebhook(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetGitWebhookByIDUsingGETUnauthorized creates a GetGitWebhookByIDUsingGETUnauthorized with default headers values
func NewGetGitWebhookByIDUsingGETUnauthorized() *GetGitWebhookByIDUsingGETUnauthorized {
	return &GetGitWebhookByIDUsingGETUnauthorized{}
}

/*GetGitWebhookByIDUsingGETUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetGitWebhookByIDUsingGETUnauthorized struct {
}

func (o *GetGitWebhookByIDUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{id}][%d] getGitWebhookByIdUsingGETUnauthorized ", 401)
}

func (o *GetGitWebhookByIDUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitWebhookByIDUsingGETForbidden creates a GetGitWebhookByIDUsingGETForbidden with default headers values
func NewGetGitWebhookByIDUsingGETForbidden() *GetGitWebhookByIDUsingGETForbidden {
	return &GetGitWebhookByIDUsingGETForbidden{}
}

/*GetGitWebhookByIDUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetGitWebhookByIDUsingGETForbidden struct {
}

func (o *GetGitWebhookByIDUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{id}][%d] getGitWebhookByIdUsingGETForbidden ", 403)
}

func (o *GetGitWebhookByIDUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitWebhookByIDUsingGETNotFound creates a GetGitWebhookByIDUsingGETNotFound with default headers values
func NewGetGitWebhookByIDUsingGETNotFound() *GetGitWebhookByIDUsingGETNotFound {
	return &GetGitWebhookByIDUsingGETNotFound{}
}

/*GetGitWebhookByIDUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetGitWebhookByIDUsingGETNotFound struct {
}

func (o *GetGitWebhookByIDUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{id}][%d] getGitWebhookByIdUsingGETNotFound ", 404)
}

func (o *GetGitWebhookByIDUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetGitWebhookByIDUsingGETInternalServerError creates a GetGitWebhookByIDUsingGETInternalServerError with default headers values
func NewGetGitWebhookByIDUsingGETInternalServerError() *GetGitWebhookByIDUsingGETInternalServerError {
	return &GetGitWebhookByIDUsingGETInternalServerError{}
}

/*GetGitWebhookByIDUsingGETInternalServerError handles this case with default header values.

Server Error
*/
type GetGitWebhookByIDUsingGETInternalServerError struct {
}

func (o *GetGitWebhookByIDUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/git-webhooks/{id}][%d] getGitWebhookByIdUsingGETInternalServerError ", 500)
}

func (o *GetGitWebhookByIDUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
