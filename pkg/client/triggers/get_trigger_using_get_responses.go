// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// GetTriggerUsingGETReader is a Reader for the GetTriggerUsingGET structure.
type GetTriggerUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTriggerUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTriggerUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTriggerUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTriggerUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTriggerUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTriggerUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTriggerUsingGETOK creates a GetTriggerUsingGETOK with default headers values
func NewGetTriggerUsingGETOK() *GetTriggerUsingGETOK {
	return &GetTriggerUsingGETOK{}
}

/*GetTriggerUsingGETOK handles this case with default header values.

'Success' with gerrit trigger
*/
type GetTriggerUsingGETOK struct {
	Payload models.GerritTrigger
}

func (o *GetTriggerUsingGETOK) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-triggers/{id}][%d] getTriggerUsingGETOK  %+v", 200, o.Payload)
}

func (o *GetTriggerUsingGETOK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *GetTriggerUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewGetTriggerUsingGETUnauthorized creates a GetTriggerUsingGETUnauthorized with default headers values
func NewGetTriggerUsingGETUnauthorized() *GetTriggerUsingGETUnauthorized {
	return &GetTriggerUsingGETUnauthorized{}
}

/*GetTriggerUsingGETUnauthorized handles this case with default header values.

Unauthorized Request
*/
type GetTriggerUsingGETUnauthorized struct {
}

func (o *GetTriggerUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-triggers/{id}][%d] getTriggerUsingGETUnauthorized ", 401)
}

func (o *GetTriggerUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTriggerUsingGETForbidden creates a GetTriggerUsingGETForbidden with default headers values
func NewGetTriggerUsingGETForbidden() *GetTriggerUsingGETForbidden {
	return &GetTriggerUsingGETForbidden{}
}

/*GetTriggerUsingGETForbidden handles this case with default header values.

Forbidden
*/
type GetTriggerUsingGETForbidden struct {
}

func (o *GetTriggerUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-triggers/{id}][%d] getTriggerUsingGETForbidden ", 403)
}

func (o *GetTriggerUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTriggerUsingGETNotFound creates a GetTriggerUsingGETNotFound with default headers values
func NewGetTriggerUsingGETNotFound() *GetTriggerUsingGETNotFound {
	return &GetTriggerUsingGETNotFound{}
}

/*GetTriggerUsingGETNotFound handles this case with default header values.

Not Found
*/
type GetTriggerUsingGETNotFound struct {
}

func (o *GetTriggerUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-triggers/{id}][%d] getTriggerUsingGETNotFound ", 404)
}

func (o *GetTriggerUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTriggerUsingGETInternalServerError creates a GetTriggerUsingGETInternalServerError with default headers values
func NewGetTriggerUsingGETInternalServerError() *GetTriggerUsingGETInternalServerError {
	return &GetTriggerUsingGETInternalServerError{}
}

/*GetTriggerUsingGETInternalServerError handles this case with default header values.

Server Error
*/
type GetTriggerUsingGETInternalServerError struct {
}

func (o *GetTriggerUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /codestream/api/gerrit-triggers/{id}][%d] getTriggerUsingGETInternalServerError ", 500)
}

func (o *GetTriggerUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
