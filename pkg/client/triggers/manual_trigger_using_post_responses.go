// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// ManualTriggerUsingPOSTReader is a Reader for the ManualTriggerUsingPOST structure.
type ManualTriggerUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ManualTriggerUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewManualTriggerUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewManualTriggerUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewManualTriggerUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewManualTriggerUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewManualTriggerUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewManualTriggerUsingPOSTOK creates a ManualTriggerUsingPOSTOK with default headers values
func NewManualTriggerUsingPOSTOK() *ManualTriggerUsingPOSTOK {
	return &ManualTriggerUsingPOSTOK{}
}

/*ManualTriggerUsingPOSTOK handles this case with default header values.

'Success' with Manual trigger Gerrit event
*/
type ManualTriggerUsingPOSTOK struct {
	Payload models.ManualTriggerResponse
}

func (o *ManualTriggerUsingPOSTOK) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualTriggerUsingPOSTOK  %+v", 200, o.Payload)
}

func (o *ManualTriggerUsingPOSTOK) GetPayload() models.ManualTriggerResponse {
	return o.Payload
}

func (o *ManualTriggerUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalManualTriggerResponse(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewManualTriggerUsingPOSTUnauthorized creates a ManualTriggerUsingPOSTUnauthorized with default headers values
func NewManualTriggerUsingPOSTUnauthorized() *ManualTriggerUsingPOSTUnauthorized {
	return &ManualTriggerUsingPOSTUnauthorized{}
}

/*ManualTriggerUsingPOSTUnauthorized handles this case with default header values.

Unauthorized Request
*/
type ManualTriggerUsingPOSTUnauthorized struct {
}

func (o *ManualTriggerUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualTriggerUsingPOSTUnauthorized ", 401)
}

func (o *ManualTriggerUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewManualTriggerUsingPOSTForbidden creates a ManualTriggerUsingPOSTForbidden with default headers values
func NewManualTriggerUsingPOSTForbidden() *ManualTriggerUsingPOSTForbidden {
	return &ManualTriggerUsingPOSTForbidden{}
}

/*ManualTriggerUsingPOSTForbidden handles this case with default header values.

Forbidden
*/
type ManualTriggerUsingPOSTForbidden struct {
}

func (o *ManualTriggerUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualTriggerUsingPOSTForbidden ", 403)
}

func (o *ManualTriggerUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewManualTriggerUsingPOSTNotFound creates a ManualTriggerUsingPOSTNotFound with default headers values
func NewManualTriggerUsingPOSTNotFound() *ManualTriggerUsingPOSTNotFound {
	return &ManualTriggerUsingPOSTNotFound{}
}

/*ManualTriggerUsingPOSTNotFound handles this case with default header values.

Not Found
*/
type ManualTriggerUsingPOSTNotFound struct {
}

func (o *ManualTriggerUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualTriggerUsingPOSTNotFound ", 404)
}

func (o *ManualTriggerUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewManualTriggerUsingPOSTInternalServerError creates a ManualTriggerUsingPOSTInternalServerError with default headers values
func NewManualTriggerUsingPOSTInternalServerError() *ManualTriggerUsingPOSTInternalServerError {
	return &ManualTriggerUsingPOSTInternalServerError{}
}

/*ManualTriggerUsingPOSTInternalServerError handles this case with default header values.

Server Error
*/
type ManualTriggerUsingPOSTInternalServerError struct {
}

func (o *ManualTriggerUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /codestream/api/gerrit-events][%d] manualTriggerUsingPOSTInternalServerError ", 500)
}

func (o *ManualTriggerUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
