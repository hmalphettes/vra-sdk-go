// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// NewPatchByNameUsingPATCH2Params creates a new PatchByNameUsingPATCH2Params object
// with the default values initialized.
func NewPatchByNameUsingPATCH2Params() *PatchByNameUsingPATCH2Params {
	var ()
	return &PatchByNameUsingPATCH2Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchByNameUsingPATCH2ParamsWithTimeout creates a new PatchByNameUsingPATCH2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchByNameUsingPATCH2ParamsWithTimeout(timeout time.Duration) *PatchByNameUsingPATCH2Params {
	var ()
	return &PatchByNameUsingPATCH2Params{

		timeout: timeout,
	}
}

// NewPatchByNameUsingPATCH2ParamsWithContext creates a new PatchByNameUsingPATCH2Params object
// with the default values initialized, and the ability to set a context for a request
func NewPatchByNameUsingPATCH2ParamsWithContext(ctx context.Context) *PatchByNameUsingPATCH2Params {
	var ()
	return &PatchByNameUsingPATCH2Params{

		Context: ctx,
	}
}

// NewPatchByNameUsingPATCH2ParamsWithHTTPClient creates a new PatchByNameUsingPATCH2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchByNameUsingPATCH2ParamsWithHTTPClient(client *http.Client) *PatchByNameUsingPATCH2Params {
	var ()
	return &PatchByNameUsingPATCH2Params{
		HTTPClient: client,
	}
}

/*PatchByNameUsingPATCH2Params contains all the parameters to send to the API endpoint
for the patch by name using p a t c h 2 operation typically these are written to a http.Request
*/
type PatchByNameUsingPATCH2Params struct {

	/*APIVersion
	  The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /codestream/api/about

	*/
	APIVersion string
	/*GerritTriggerPatch
	  gerritTriggerPatch

	*/
	GerritTriggerPatch models.GerritTriggerPatch
	/*Name
	  name

	*/
	Name string
	/*Project
	  project

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithTimeout(timeout time.Duration) *PatchByNameUsingPATCH2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithContext(ctx context.Context) *PatchByNameUsingPATCH2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithHTTPClient(client *http.Client) *PatchByNameUsingPATCH2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAPIVersion adds the aPIVersion to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithAPIVersion(aPIVersion string) *PatchByNameUsingPATCH2Params {
	o.SetAPIVersion(aPIVersion)
	return o
}

// SetAPIVersion adds the apiVersion to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetAPIVersion(aPIVersion string) {
	o.APIVersion = aPIVersion
}

// WithGerritTriggerPatch adds the gerritTriggerPatch to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithGerritTriggerPatch(gerritTriggerPatch models.GerritTriggerPatch) *PatchByNameUsingPATCH2Params {
	o.SetGerritTriggerPatch(gerritTriggerPatch)
	return o
}

// SetGerritTriggerPatch adds the gerritTriggerPatch to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetGerritTriggerPatch(gerritTriggerPatch models.GerritTriggerPatch) {
	o.GerritTriggerPatch = gerritTriggerPatch
}

// WithName adds the name to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithName(name string) *PatchByNameUsingPATCH2Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetName(name string) {
	o.Name = name
}

// WithProject adds the project to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) WithProject(project string) *PatchByNameUsingPATCH2Params {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the patch by name using p a t c h 2 params
func (o *PatchByNameUsingPATCH2Params) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *PatchByNameUsingPATCH2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param apiVersion
	qrAPIVersion := o.APIVersion
	qAPIVersion := qrAPIVersion
	if err := r.SetQueryParam("apiVersion", qAPIVersion); err != nil {
		return err
	}

	if err := r.SetBodyParam(o.GerritTriggerPatch); err != nil {
		return err
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
