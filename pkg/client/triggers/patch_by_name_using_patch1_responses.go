// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// PatchByNameUsingPATCH1Reader is a Reader for the PatchByNameUsingPATCH1 structure.
type PatchByNameUsingPATCH1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchByNameUsingPATCH1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchByNameUsingPATCH1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPatchByNameUsingPATCH1Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchByNameUsingPATCH1Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchByNameUsingPATCH1NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchByNameUsingPATCH1InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchByNameUsingPATCH1OK creates a PatchByNameUsingPATCH1OK with default headers values
func NewPatchByNameUsingPATCH1OK() *PatchByNameUsingPATCH1OK {
	return &PatchByNameUsingPATCH1OK{}
}

/*PatchByNameUsingPATCH1OK handles this case with default header values.

'Success' with Gerrit Listener patch
*/
type PatchByNameUsingPATCH1OK struct {
	Payload models.GerritListener
}

func (o *PatchByNameUsingPATCH1OK) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchByNameUsingPATCH1OK  %+v", 200, o.Payload)
}

func (o *PatchByNameUsingPATCH1OK) GetPayload() models.GerritListener {
	return o.Payload
}

func (o *PatchByNameUsingPATCH1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritListener(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewPatchByNameUsingPATCH1Unauthorized creates a PatchByNameUsingPATCH1Unauthorized with default headers values
func NewPatchByNameUsingPATCH1Unauthorized() *PatchByNameUsingPATCH1Unauthorized {
	return &PatchByNameUsingPATCH1Unauthorized{}
}

/*PatchByNameUsingPATCH1Unauthorized handles this case with default header values.

Unauthorized Request
*/
type PatchByNameUsingPATCH1Unauthorized struct {
}

func (o *PatchByNameUsingPATCH1Unauthorized) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchByNameUsingPATCH1Unauthorized ", 401)
}

func (o *PatchByNameUsingPATCH1Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchByNameUsingPATCH1Forbidden creates a PatchByNameUsingPATCH1Forbidden with default headers values
func NewPatchByNameUsingPATCH1Forbidden() *PatchByNameUsingPATCH1Forbidden {
	return &PatchByNameUsingPATCH1Forbidden{}
}

/*PatchByNameUsingPATCH1Forbidden handles this case with default header values.

Forbidden
*/
type PatchByNameUsingPATCH1Forbidden struct {
}

func (o *PatchByNameUsingPATCH1Forbidden) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchByNameUsingPATCH1Forbidden ", 403)
}

func (o *PatchByNameUsingPATCH1Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchByNameUsingPATCH1NotFound creates a PatchByNameUsingPATCH1NotFound with default headers values
func NewPatchByNameUsingPATCH1NotFound() *PatchByNameUsingPATCH1NotFound {
	return &PatchByNameUsingPATCH1NotFound{}
}

/*PatchByNameUsingPATCH1NotFound handles this case with default header values.

Not Found
*/
type PatchByNameUsingPATCH1NotFound struct {
}

func (o *PatchByNameUsingPATCH1NotFound) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchByNameUsingPATCH1NotFound ", 404)
}

func (o *PatchByNameUsingPATCH1NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchByNameUsingPATCH1InternalServerError creates a PatchByNameUsingPATCH1InternalServerError with default headers values
func NewPatchByNameUsingPATCH1InternalServerError() *PatchByNameUsingPATCH1InternalServerError {
	return &PatchByNameUsingPATCH1InternalServerError{}
}

/*PatchByNameUsingPATCH1InternalServerError handles this case with default header values.

Server Error
*/
type PatchByNameUsingPATCH1InternalServerError struct {
}

func (o *PatchByNameUsingPATCH1InternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /codestream/api/gerrit-listeners/{project}/{name}][%d] patchByNameUsingPATCH1InternalServerError ", 500)
}

func (o *PatchByNameUsingPATCH1InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
