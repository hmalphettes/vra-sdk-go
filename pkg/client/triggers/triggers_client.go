// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new triggers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for triggers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CloneListenerUsingPOST clones a gerrit listener

Clone a Gerrit Listener
*/
func (a *Client) CloneListenerUsingPOST(params *CloneListenerUsingPOSTParams) (*CloneListenerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneListenerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cloneListenerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloneListenerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneListenerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneListenerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloneTriggerUsingPOST clones a gerrit trigger

Clone a Gerrit Trigger
*/
func (a *Client) CloneTriggerUsingPOST(params *CloneTriggerUsingPOSTParams) (*CloneTriggerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneTriggerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cloneTriggerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloneTriggerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneTriggerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneTriggerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDockerRegistryWebhookUsingPOST creates a docker registry webhook

Create a Docker Registry Webhook
*/
func (a *Client) CreateDockerRegistryWebhookUsingPOST(params *CreateDockerRegistryWebhookUsingPOSTParams) (*CreateDockerRegistryWebhookUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDockerRegistryWebhookUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDockerRegistryWebhookUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/registry-webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDockerRegistryWebhookUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDockerRegistryWebhookUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDockerRegistryWebhookUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGerritListenerUsingPOST creates a gerrit listener

Create a Gerrit Listener
*/
func (a *Client) CreateGerritListenerUsingPOST(params *CreateGerritListenerUsingPOSTParams) (*CreateGerritListenerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGerritListenerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGerritListenerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGerritListenerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGerritListenerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGerritListenerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitWebhookUsingPOST creates a git webhook

Create a Git Webhook
*/
func (a *Client) CreateGitWebhookUsingPOST(params *CreateGitWebhookUsingPOSTParams) (*CreateGitWebhookUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitWebhookUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGitWebhookUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/git-webhooks",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGitWebhookUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitWebhookUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGitWebhookUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUsingPOST2 creates a gerrit trigger

Create a Gerrit Trigger
*/
func (a *Client) CreateUsingPOST2(params *CreateUsingPOST2Params) (*CreateUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUsingPOST2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-triggers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByIDUsingDELETE deletes a docker registry webhook

Delete a Docker Registry Webhook
*/
func (a *Client) DeleteByIDUsingDELETE(params *DeleteByIDUsingDELETEParams) (*DeleteByIDUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByIDUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByIdUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByIDUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByIDUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByIdUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByIDUsingDELETE1 deletes a gerrit listener with id

Delete a Gerrit Listener with id
*/
func (a *Client) DeleteByIDUsingDELETE1(params *DeleteByIDUsingDELETE1Params) (*DeleteByIDUsingDELETE1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByIDUsingDELETE1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByIdUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByIDUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByIDUsingDELETE1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByIdUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByNameUsingDELETE deletes a docker registry webhook using name

Delete a Docker Registry Webhook using name
*/
func (a *Client) DeleteByNameUsingDELETE(params *DeleteByNameUsingDELETEParams) (*DeleteByNameUsingDELETEOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETEParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETEReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETEOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByNameUsingDELETE1 deletes a gerrit listener with project and name

Delete a Gerrit Listener with project and name
*/
func (a *Client) DeleteByNameUsingDELETE1(params *DeleteByNameUsingDELETE1Params) (*DeleteByNameUsingDELETE1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_1",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByNameUsingDELETE2 deletes a gerrit trigger with project and name

Delete a Gerrit Trigger with project and name
*/
func (a *Client) DeleteByNameUsingDELETE2(params *DeleteByNameUsingDELETE2Params) (*DeleteByNameUsingDELETE2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_2",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteByNameUsingDELETE3 deletes a git webhook by name

Delete a Git Webhook by name
*/
func (a *Client) DeleteByNameUsingDELETE3(params *DeleteByNameUsingDELETE3Params) (*DeleteByNameUsingDELETE3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameUsingDELETE3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByNameUsingDELETE_3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByNameUsingDELETE3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteByNameUsingDELETE3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteByNameUsingDELETE_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETEMixin3 deletes a docker registry event

Delete a Docker Registry Event
*/
func (a *Client) DeleteUsingDELETEMixin3(params *DeleteUsingDELETEMixin3Params) (*DeleteUsingDELETEMixin3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETEMixin3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETEMixin3",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETEMixin3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETEMixin3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETEMixin3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE4 deletes a gerrit event

Delete a Gerrit Event
*/
func (a *Client) DeleteUsingDELETE4(params *DeleteUsingDELETE4Params) (*DeleteUsingDELETE4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_4",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE5 deletes a gerrit trigger with id

Delete a Gerrit Trigger with id
*/
func (a *Client) DeleteUsingDELETE5(params *DeleteUsingDELETE5Params) (*DeleteUsingDELETE5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_5",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE5Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE5OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_5: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE6 deletes a git event

Delete a Git Event
*/
func (a *Client) DeleteUsingDELETE6(params *DeleteUsingDELETE6Params) (*DeleteUsingDELETE6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_6",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUsingDELETE7 deletes a git webhook

Delete a Git Webhook
*/
func (a *Client) DeleteUsingDELETE7(params *DeleteUsingDELETE7Params) (*DeleteUsingDELETE7OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsingDELETE7Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUsingDELETE_7",
		Method:             "DELETE",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteUsingDELETE7Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUsingDELETE7OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUsingDELETE_7: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDockerEventsUsingGET gets all docker registry events

Get all Docker Registry Events
*/
func (a *Client) GetAllDockerEventsUsingGET(params *GetAllDockerEventsUsingGETParams) (*GetAllDockerEventsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDockerEventsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllDockerEventsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllDockerEventsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDockerEventsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDockerEventsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDockerRegistryWebhooksUsingGET gets all docker registry webhooks

Get all Docker Registry Webhooks
*/
func (a *Client) GetAllDockerRegistryWebhooksUsingGET(params *GetAllDockerRegistryWebhooksUsingGETParams) (*GetAllDockerRegistryWebhooksUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDockerRegistryWebhooksUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllDockerRegistryWebhooksUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllDockerRegistryWebhooksUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDockerRegistryWebhooksUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDockerRegistryWebhooksUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllEventsUsingGET gets all gerrit events

Get all Gerrit Events
*/
func (a *Client) GetAllEventsUsingGET(params *GetAllEventsUsingGETParams) (*GetAllEventsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEventsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllEventsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllEventsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEventsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEventsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllGerritListenersUsingGET gets all gerrit listeners

Get all gerrit listeners
*/
func (a *Client) GetAllGerritListenersUsingGET(params *GetAllGerritListenersUsingGETParams) (*GetAllGerritListenersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGerritListenersUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllGerritListenersUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllGerritListenersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGerritListenersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGerritListenersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllGitEventsUsingGET gets all git events

Get all Git Events
*/
func (a *Client) GetAllGitEventsUsingGET(params *GetAllGitEventsUsingGETParams) (*GetAllGitEventsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGitEventsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllGitEventsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllGitEventsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGitEventsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGitEventsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllGitWebhooksUsingGET gets all git webhooks

Get all Git Webhooks
*/
func (a *Client) GetAllGitWebhooksUsingGET(params *GetAllGitWebhooksUsingGETParams) (*GetAllGitWebhooksUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllGitWebhooksUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllGitWebhooksUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllGitWebhooksUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllGitWebhooksUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllGitWebhooksUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUsingGET2 gets all gerrit triggers

Get all gerrit triggers
*/
func (a *Client) GetAllUsingGET2(params *GetAllUsingGET2Params) (*GetAllUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsingGET2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsingGET_2",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerEventByIDUsingGET gets a docker registry event

Get a Docker Registry Event based on id
*/
func (a *Client) GetDockerEventByIDUsingGET(params *GetDockerEventByIDUsingGETParams) (*GetDockerEventByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerEventByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDockerEventByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDockerEventByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerEventByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDockerEventByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerRegistryWebhookByIDUsingGET gets a docker registry webhook

Get a Docker Registry Webhook based on id
*/
func (a *Client) GetDockerRegistryWebhookByIDUsingGET(params *GetDockerRegistryWebhookByIDUsingGETParams) (*GetDockerRegistryWebhookByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerRegistryWebhookByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDockerRegistryWebhookByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDockerRegistryWebhookByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerRegistryWebhookByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDockerRegistryWebhookByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDockerRegistryWebhookByNameUsingGET gets a docker registry webhook by name

Get a Docker Registry Webhook by Name
*/
func (a *Client) GetDockerRegistryWebhookByNameUsingGET(params *GetDockerRegistryWebhookByNameUsingGETParams) (*GetDockerRegistryWebhookByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDockerRegistryWebhookByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDockerRegistryWebhookByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDockerRegistryWebhookByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDockerRegistryWebhookByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDockerRegistryWebhookByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEventByIDUsingGET gets a gerrit event

Get a gerrit Event based on id
*/
func (a *Client) GetEventByIDUsingGET(params *GetEventByIDUsingGETParams) (*GetEventByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEventByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGerritListenerByIDUsingGET gets a gerrit listener

Get a gerrit listeners based on id
*/
func (a *Client) GetGerritListenerByIDUsingGET(params *GetGerritListenerByIDUsingGETParams) (*GetGerritListenerByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritListenerByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGerritListenerByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGerritListenerByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritListenerByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritListenerByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGerritListenerByNameUsingGET gets a gerrit listener by project and name

Get a gerrit listener based on project and name
*/
func (a *Client) GetGerritListenerByNameUsingGET(params *GetGerritListenerByNameUsingGETParams) (*GetGerritListenerByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritListenerByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGerritListenerByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGerritListenerByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritListenerByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritListenerByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGerritProjectsUsingGET gets gerrit projects from the gerrit listener using id

Get Gerrit Projects from the Gerrit Listener using id
*/
func (a *Client) GetGerritProjectsUsingGET(params *GetGerritProjectsUsingGETParams) (*GetGerritProjectsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritProjectsUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGerritProjectsUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGerritProjectsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritProjectsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritProjectsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGerritProjectsUsingGET1 gets gerrit projects from the gerrit listener using project and name

Get Gerrit Projects from the Gerrit Listener using project and name
*/
func (a *Client) GetGerritProjectsUsingGET1(params *GetGerritProjectsUsingGET1Params) (*GetGerritProjectsUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGerritProjectsUsingGET1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGerritProjectsUsingGET_1",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}/projects",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGerritProjectsUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGerritProjectsUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGerritProjectsUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitEventByIDUsingGET gets a git event

Get a Git Event based on id
*/
func (a *Client) GetGitEventByIDUsingGET(params *GetGitEventByIDUsingGETParams) (*GetGitEventByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitEventByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGitEventByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGitEventByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitEventByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitEventByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitWebhookByIDUsingGET gets a git webhook

Get a Git Webhook based on id
*/
func (a *Client) GetGitWebhookByIDUsingGET(params *GetGitWebhookByIDUsingGETParams) (*GetGitWebhookByIDUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitWebhookByIDUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGitWebhookByIDUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGitWebhookByIDUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitWebhookByIDUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitWebhookByIDUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitWebhookByNameUsingGET gets a git webhook by name

Get a Git Webhook by Name
*/
func (a *Client) GetGitWebhookByNameUsingGET(params *GetGitWebhookByNameUsingGETParams) (*GetGitWebhookByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitWebhookByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGitWebhookByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGitWebhookByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitWebhookByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitWebhookByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTriggerByNameUsingGET gets a gerrit trigger by project and name

Get a gerrit trigger based on project and name
*/
func (a *Client) GetTriggerByNameUsingGET(params *GetTriggerByNameUsingGETParams) (*GetTriggerByNameUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerByNameUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggerByNameUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTriggerByNameUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerByNameUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTriggerByNameUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTriggerUsingGET gets a gerrit trigger

Get a gerrit trigger based on id
*/
func (a *Client) GetTriggerUsingGET(params *GetTriggerUsingGETParams) (*GetTriggerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerUsingGETParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTriggerUsingGET",
		Method:             "GET",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTriggerUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTriggerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ManualTriggerUsingPOST manuals trigger gerrit event

Manual trigger Gerrit event
*/
func (a *Client) ManualTriggerUsingPOST(params *ManualTriggerUsingPOSTParams) (*ManualTriggerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManualTriggerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "manualTriggerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-events",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ManualTriggerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ManualTriggerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for manualTriggerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByIDUsingPATCH patches a docker registry webhook with id

Patch a Docker Registry Webhook with id
*/
func (a *Client) PatchByIDUsingPATCH(params *PatchByIDUsingPATCHParams) (*PatchByIDUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByIDUsingPATCH1 patches a gerrit listener with id

Patch a Gerrit Listener with id
*/
func (a *Client) PatchByIDUsingPATCH1(params *PatchByIDUsingPATCH1Params) (*PatchByIDUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByIDUsingPATCH2 patches a gerrit trigger with id

Patch a Gerrit Trigger with id
*/
func (a *Client) PatchByIDUsingPATCH2(params *PatchByIDUsingPATCH2Params) (*PatchByIDUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByIDUsingPATCH2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByIdUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByIDUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByIDUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByIdUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByNameUsingPATCH patches a docker registry webhook with project and name

Patch a Docker Registry Webhook with project and name
*/
func (a *Client) PatchByNameUsingPATCH(params *PatchByNameUsingPATCHParams) (*PatchByNameUsingPATCHOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCHParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCHReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCHOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByNameUsingPATCH1 patches a gerrit listener with project and name

Patch a Gerrit Listener with project and name
*/
func (a *Client) PatchByNameUsingPATCH1(params *PatchByNameUsingPATCH1Params) (*PatchByNameUsingPATCH1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCH1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH_1",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCH1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCH1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchByNameUsingPATCH2 patches a gerrit trigger with project and name

Patch a Gerrit Trigger with project and name
*/
func (a *Client) PatchByNameUsingPATCH2(params *PatchByNameUsingPATCH2Params) (*PatchByNameUsingPATCH2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchByNameUsingPATCH2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "patchByNameUsingPATCH_2",
		Method:             "PATCH",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchByNameUsingPATCH2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchByNameUsingPATCH2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchByNameUsingPATCH_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeOrRerunEventUsingPOST res run resume docker registry event

Re-run/Resume Docker Registry Event
*/
func (a *Client) ResumeOrRerunEventUsingPOST(params *ResumeOrRerunEventUsingPOSTParams) (*ResumeOrRerunEventUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/registry-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeOrRerunEventUsingPOST1 res run resume gerrit event

Re-run/Resume Gerrit event
*/
func (a *Client) ResumeOrRerunEventUsingPOST1(params *ResumeOrRerunEventUsingPOST1Params) (*ResumeOrRerunEventUsingPOST1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOST1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOST1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeOrRerunEventUsingPOST2 res run resume git event

Re-run/Resume Git Event
*/
func (a *Client) ResumeOrRerunEventUsingPOST2(params *ResumeOrRerunEventUsingPOST2Params) (*ResumeOrRerunEventUsingPOST2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeOrRerunEventUsingPOST2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resumeOrRerunEventUsingPOST_2",
		Method:             "POST",
		PathPattern:        "/codestream/api/git-events/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResumeOrRerunEventUsingPOST2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeOrRerunEventUsingPOST2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resumeOrRerunEventUsingPOST_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByIDUsingPUT2 updates a gerrit listener with id

Update a Gerrit Listener with id
*/
func (a *Client) UpdateByIDUsingPUT2(params *UpdateByIDUsingPUT2Params) (*UpdateByIDUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByIDUsingPUT2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByIdUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-listeners/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByIDUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByIDUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByIdUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByIDUsingPUT3 updates a gerrit trigger with id

Update a Gerrit Trigger with id
*/
func (a *Client) UpdateByIDUsingPUT3(params *UpdateByIDUsingPUT3Params) (*UpdateByIDUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByIDUsingPUT3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByIdUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-triggers/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByIDUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByIDUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByIdUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByNameUsingPUT updates a docker registry webhook using name

Update a Docker Registry Webhook using name
*/
func (a *Client) UpdateByNameUsingPUT(params *UpdateByNameUsingPUTParams) (*UpdateByNameUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/registry-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByNameUsingPUT2 updates a gerrit listener with project and name

Update a Gerrit Listener with project and name
*/
func (a *Client) UpdateByNameUsingPUT2(params *UpdateByNameUsingPUT2Params) (*UpdateByNameUsingPUT2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_2",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-listeners/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByNameUsingPUT3 updates a gerrit trigger with project and name

Update a Gerrit Trigger with project and name
*/
func (a *Client) UpdateByNameUsingPUT3(params *UpdateByNameUsingPUT3Params) (*UpdateByNameUsingPUT3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_3",
		Method:             "PUT",
		PathPattern:        "/codestream/api/gerrit-triggers/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateByNameUsingPUT4 updates a git webhook using name

Update a Git Webhook using name
*/
func (a *Client) UpdateByNameUsingPUT4(params *UpdateByNameUsingPUT4Params) (*UpdateByNameUsingPUT4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateByNameUsingPUT4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateByNameUsingPUT_4",
		Method:             "PUT",
		PathPattern:        "/codestream/api/git-webhooks/{project}/{name}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateByNameUsingPUT4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateByNameUsingPUT4OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateByNameUsingPUT_4: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT updates a docker registry webhook

Update a Docker Registry Webhook
*/
func (a *Client) UpdateUsingPUT(params *UpdateUsingPUTParams) (*UpdateUsingPUTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/codestream/api/registry-webhooks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUsingPUT1 updates a git webhook

Update a Git Webhook
*/
func (a *Client) UpdateUsingPUT1(params *UpdateUsingPUT1Params) (*UpdateUsingPUT1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUsingPUT1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/codestream/api/git-webhooks/{id}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUsingPUT1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUsingPUT_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateGerritListenerUsingPOST validates a gerrit listener

Validate a Gerrit Listener
*/
func (a *Client) ValidateGerritListenerUsingPOST(params *ValidateGerritListenerUsingPOSTParams) (*ValidateGerritListenerUsingPOSTOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateGerritListenerUsingPOSTParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateGerritListenerUsingPOST",
		Method:             "POST",
		PathPattern:        "/codestream/api/gerrit-listeners/validate",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ValidateGerritListenerUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateGerritListenerUsingPOSTOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateGerritListenerUsingPOST: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
