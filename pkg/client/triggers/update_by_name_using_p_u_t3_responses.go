// Code generated by go-swagger; DO NOT EDIT.

package triggers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/vmware/vra-sdk-go/pkg/models"
)

// UpdateByNameUsingPUT3Reader is a Reader for the UpdateByNameUsingPUT3 structure.
type UpdateByNameUsingPUT3Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateByNameUsingPUT3Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateByNameUsingPUT3OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateByNameUsingPUT3Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateByNameUsingPUT3Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateByNameUsingPUT3NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateByNameUsingPUT3InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateByNameUsingPUT3OK creates a UpdateByNameUsingPUT3OK with default headers values
func NewUpdateByNameUsingPUT3OK() *UpdateByNameUsingPUT3OK {
	return &UpdateByNameUsingPUT3OK{}
}

/*UpdateByNameUsingPUT3OK handles this case with default header values.

'Success' with Gerrit Trigger Update
*/
type UpdateByNameUsingPUT3OK struct {
	Payload models.GerritTrigger
}

func (o *UpdateByNameUsingPUT3OK) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateByNameUsingPUT3OK  %+v", 200, o.Payload)
}

func (o *UpdateByNameUsingPUT3OK) GetPayload() models.GerritTrigger {
	return o.Payload
}

func (o *UpdateByNameUsingPUT3OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload as interface type
	payload, err := models.UnmarshalGerritTrigger(response.Body(), consumer)
	if err != nil {
		return err
	}
	o.Payload = payload

	return nil
}

// NewUpdateByNameUsingPUT3Unauthorized creates a UpdateByNameUsingPUT3Unauthorized with default headers values
func NewUpdateByNameUsingPUT3Unauthorized() *UpdateByNameUsingPUT3Unauthorized {
	return &UpdateByNameUsingPUT3Unauthorized{}
}

/*UpdateByNameUsingPUT3Unauthorized handles this case with default header values.

Unauthorized Request
*/
type UpdateByNameUsingPUT3Unauthorized struct {
}

func (o *UpdateByNameUsingPUT3Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateByNameUsingPUT3Unauthorized ", 401)
}

func (o *UpdateByNameUsingPUT3Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateByNameUsingPUT3Forbidden creates a UpdateByNameUsingPUT3Forbidden with default headers values
func NewUpdateByNameUsingPUT3Forbidden() *UpdateByNameUsingPUT3Forbidden {
	return &UpdateByNameUsingPUT3Forbidden{}
}

/*UpdateByNameUsingPUT3Forbidden handles this case with default header values.

Forbidden
*/
type UpdateByNameUsingPUT3Forbidden struct {
}

func (o *UpdateByNameUsingPUT3Forbidden) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateByNameUsingPUT3Forbidden ", 403)
}

func (o *UpdateByNameUsingPUT3Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateByNameUsingPUT3NotFound creates a UpdateByNameUsingPUT3NotFound with default headers values
func NewUpdateByNameUsingPUT3NotFound() *UpdateByNameUsingPUT3NotFound {
	return &UpdateByNameUsingPUT3NotFound{}
}

/*UpdateByNameUsingPUT3NotFound handles this case with default header values.

Not Found
*/
type UpdateByNameUsingPUT3NotFound struct {
}

func (o *UpdateByNameUsingPUT3NotFound) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateByNameUsingPUT3NotFound ", 404)
}

func (o *UpdateByNameUsingPUT3NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateByNameUsingPUT3InternalServerError creates a UpdateByNameUsingPUT3InternalServerError with default headers values
func NewUpdateByNameUsingPUT3InternalServerError() *UpdateByNameUsingPUT3InternalServerError {
	return &UpdateByNameUsingPUT3InternalServerError{}
}

/*UpdateByNameUsingPUT3InternalServerError handles this case with default header values.

Server Error
*/
type UpdateByNameUsingPUT3InternalServerError struct {
}

func (o *UpdateByNameUsingPUT3InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /codestream/api/gerrit-triggers/{project}/{name}][%d] updateByNameUsingPUT3InternalServerError ", 500)
}

func (o *UpdateByNameUsingPUT3InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
