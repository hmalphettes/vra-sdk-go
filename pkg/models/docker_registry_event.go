// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// DockerRegistryEvent DockerRegistryEvent
//
// Docker Registry Event details.
// swagger:discriminator DockerRegistryEvent Docker Registry Event details.
type DockerRegistryEvent interface {
	runtime.Validatable

	// This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds
	CreateTimeInMicros() int64
	SetCreateTimeInMicros(int64)

	// Partial URL that provides details of the resource.
	Link() string
	SetLink(string)

	// This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds
	UpdateTimeInMicros() int64
	SetUpdateTimeInMicros(int64)

	// Date when the entity was created. The date is in ISO 8601 with time zone
	CreatedAt() string
	SetCreatedAt(string)

	// The user that created this entity
	CreatedBy() string
	SetCreatedBy(string)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// Pipeline execution index.
	ExecutionIndex() int64
	SetExecutionIndex(int64)

	// Pipeline execution link.
	ExecutionLink() string
	SetExecutionLink(string)

	// Pipeline execution status.
	ExecutionStatus() string
	SetExecutionStatus(string)

	// The id of this resource.
	ID() string
	SetID(string)

	// Name of the image.
	ImageName() string
	SetImageName(string)

	// Message is populated when an error occurs.
	Message() string
	SetMessage(string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Required: true
	Name() *string
	SetName(*string)

	// Owner Name who triggered the event.
	Owner() string
	SetOwner(string)

	// Pipeline to be executed when event is triggered.
	Pipeline() string
	SetPipeline(string)

	// The project this entity belongs to.
	Project() string
	SetProject(string)

	// RepoName corresponding to the event.
	Repo() string
	SetRepo(string)

	// Namespace inside the Docker Repository.
	RepoNamespace() string
	SetRepoNamespace(string)

	// Tag name associated with the image.
	Tag() string
	SetTag(string)

	// Commit Time for the event.
	TimeStampInMicros() int64
	SetTimeStampInMicros(int64)

	// Date when the entity was last updated. The date is in ISO 8601 with time zone.
	UpdatedAt() string
	SetUpdatedAt(string)

	// The user that last updated this entity
	UpdatedBy() string
	SetUpdatedBy(string)

	// Version of the resource.
	Version() string
	SetVersion(string)
}

type dockerRegistryEvent struct {
	createTimeInMicrosField int64

	linkField string

	updateTimeInMicrosField int64

	createdAtField string

	createdByField string

	descriptionField *string

	executionIndexField int64

	executionLinkField string

	executionStatusField string

	idField string

	imageNameField string

	messageField string

	nameField *string

	ownerField string

	pipelineField string

	projectField string

	repoField string

	repoNamespaceField string

	tagField string

	timeStampInMicrosField int64

	updatedAtField string

	updatedByField string

	versionField string
}

// CreateTimeInMicros gets the create time in micros of this polymorphic type
func (m *dockerRegistryEvent) CreateTimeInMicros() int64 {
	return m.createTimeInMicrosField
}

// SetCreateTimeInMicros sets the create time in micros of this polymorphic type
func (m *dockerRegistryEvent) SetCreateTimeInMicros(val int64) {
	m.createTimeInMicrosField = val
}

// Link gets the link of this polymorphic type
func (m *dockerRegistryEvent) Link() string {
	return m.linkField
}

// SetLink sets the link of this polymorphic type
func (m *dockerRegistryEvent) SetLink(val string) {
	m.linkField = val
}

// UpdateTimeInMicros gets the update time in micros of this polymorphic type
func (m *dockerRegistryEvent) UpdateTimeInMicros() int64 {
	return m.updateTimeInMicrosField
}

// SetUpdateTimeInMicros sets the update time in micros of this polymorphic type
func (m *dockerRegistryEvent) SetUpdateTimeInMicros(val int64) {
	m.updateTimeInMicrosField = val
}

// CreatedAt gets the created at of this polymorphic type
func (m *dockerRegistryEvent) CreatedAt() string {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *dockerRegistryEvent) SetCreatedAt(val string) {
	m.createdAtField = val
}

// CreatedBy gets the created by of this polymorphic type
func (m *dockerRegistryEvent) CreatedBy() string {
	return m.createdByField
}

// SetCreatedBy sets the created by of this polymorphic type
func (m *dockerRegistryEvent) SetCreatedBy(val string) {
	m.createdByField = val
}

// Description gets the description of this polymorphic type
func (m *dockerRegistryEvent) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *dockerRegistryEvent) SetDescription(val *string) {
	m.descriptionField = val
}

// ExecutionIndex gets the execution index of this polymorphic type
func (m *dockerRegistryEvent) ExecutionIndex() int64 {
	return m.executionIndexField
}

// SetExecutionIndex sets the execution index of this polymorphic type
func (m *dockerRegistryEvent) SetExecutionIndex(val int64) {
	m.executionIndexField = val
}

// ExecutionLink gets the execution link of this polymorphic type
func (m *dockerRegistryEvent) ExecutionLink() string {
	return m.executionLinkField
}

// SetExecutionLink sets the execution link of this polymorphic type
func (m *dockerRegistryEvent) SetExecutionLink(val string) {
	m.executionLinkField = val
}

// ExecutionStatus gets the execution status of this polymorphic type
func (m *dockerRegistryEvent) ExecutionStatus() string {
	return m.executionStatusField
}

// SetExecutionStatus sets the execution status of this polymorphic type
func (m *dockerRegistryEvent) SetExecutionStatus(val string) {
	m.executionStatusField = val
}

// ID gets the id of this polymorphic type
func (m *dockerRegistryEvent) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *dockerRegistryEvent) SetID(val string) {
	m.idField = val
}

// ImageName gets the image name of this polymorphic type
func (m *dockerRegistryEvent) ImageName() string {
	return m.imageNameField
}

// SetImageName sets the image name of this polymorphic type
func (m *dockerRegistryEvent) SetImageName(val string) {
	m.imageNameField = val
}

// Message gets the message of this polymorphic type
func (m *dockerRegistryEvent) Message() string {
	return m.messageField
}

// SetMessage sets the message of this polymorphic type
func (m *dockerRegistryEvent) SetMessage(val string) {
	m.messageField = val
}

// Name gets the name of this polymorphic type
func (m *dockerRegistryEvent) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *dockerRegistryEvent) SetName(val *string) {
	m.nameField = val
}

// Owner gets the owner of this polymorphic type
func (m *dockerRegistryEvent) Owner() string {
	return m.ownerField
}

// SetOwner sets the owner of this polymorphic type
func (m *dockerRegistryEvent) SetOwner(val string) {
	m.ownerField = val
}

// Pipeline gets the pipeline of this polymorphic type
func (m *dockerRegistryEvent) Pipeline() string {
	return m.pipelineField
}

// SetPipeline sets the pipeline of this polymorphic type
func (m *dockerRegistryEvent) SetPipeline(val string) {
	m.pipelineField = val
}

// Project gets the project of this polymorphic type
func (m *dockerRegistryEvent) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *dockerRegistryEvent) SetProject(val string) {
	m.projectField = val
}

// Repo gets the repo of this polymorphic type
func (m *dockerRegistryEvent) Repo() string {
	return m.repoField
}

// SetRepo sets the repo of this polymorphic type
func (m *dockerRegistryEvent) SetRepo(val string) {
	m.repoField = val
}

// RepoNamespace gets the repo namespace of this polymorphic type
func (m *dockerRegistryEvent) RepoNamespace() string {
	return m.repoNamespaceField
}

// SetRepoNamespace sets the repo namespace of this polymorphic type
func (m *dockerRegistryEvent) SetRepoNamespace(val string) {
	m.repoNamespaceField = val
}

// Tag gets the tag of this polymorphic type
func (m *dockerRegistryEvent) Tag() string {
	return m.tagField
}

// SetTag sets the tag of this polymorphic type
func (m *dockerRegistryEvent) SetTag(val string) {
	m.tagField = val
}

// TimeStampInMicros gets the time stamp in micros of this polymorphic type
func (m *dockerRegistryEvent) TimeStampInMicros() int64 {
	return m.timeStampInMicrosField
}

// SetTimeStampInMicros sets the time stamp in micros of this polymorphic type
func (m *dockerRegistryEvent) SetTimeStampInMicros(val int64) {
	m.timeStampInMicrosField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *dockerRegistryEvent) UpdatedAt() string {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *dockerRegistryEvent) SetUpdatedAt(val string) {
	m.updatedAtField = val
}

// UpdatedBy gets the updated by of this polymorphic type
func (m *dockerRegistryEvent) UpdatedBy() string {
	return m.updatedByField
}

// SetUpdatedBy sets the updated by of this polymorphic type
func (m *dockerRegistryEvent) SetUpdatedBy(val string) {
	m.updatedByField = val
}

// Version gets the version of this polymorphic type
func (m *dockerRegistryEvent) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *dockerRegistryEvent) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalDockerRegistryEventSlice unmarshals polymorphic slices of DockerRegistryEvent
func UnmarshalDockerRegistryEventSlice(reader io.Reader, consumer runtime.Consumer) ([]DockerRegistryEvent, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DockerRegistryEvent
	for _, element := range elements {
		obj, err := unmarshalDockerRegistryEvent(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDockerRegistryEvent unmarshals polymorphic DockerRegistryEvent
func UnmarshalDockerRegistryEvent(reader io.Reader, consumer runtime.Consumer) (DockerRegistryEvent, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDockerRegistryEvent(data, consumer)
}

func unmarshalDockerRegistryEvent(data []byte, consumer runtime.Consumer) (DockerRegistryEvent, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Docker Registry Event details. property.
	var getType struct {
		DockerRegistryEventDetails string `json:"Docker Registry Event details."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Docker Registry Event details.", "body", getType.DockerRegistryEventDetails); err != nil {
		return nil, err
	}

	// The value of Docker Registry Event details. is used to determine which type to create and unmarshal the data into
	switch getType.DockerRegistryEventDetails {
	case "DockerRegistryEvent":
		var result dockerRegistryEvent
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid Docker Registry Event details. value: %q", getType.DockerRegistryEventDetails)

}

// Validate validates this docker registry event
func (m *dockerRegistryEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *dockerRegistryEvent) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *dockerRegistryEvent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}
