// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// GerritEvent GerritEvent
//
// Contains all the details of a Gerrit Event.
// swagger:discriminator GerritEvent Contains all the details of a Gerrit Event.
type GerritEvent interface {
	runtime.Validatable

	// This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds
	CreateTimeInMicros() int64
	SetCreateTimeInMicros(int64)

	// Partial URL that provides details of the resource.
	Link() string
	SetLink(string)

	// This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds
	UpdateTimeInMicros() int64
	SetUpdateTimeInMicros(int64)

	// Verified Label value along with the action posted to the gerrit server.
	ActionTaken() string
	SetActionTaken(string)

	// Gerrit Project branch on which the change has happened.
	Branch() string
	SetBranch(string)

	// Gerrit ChangeSet Number provided by Gerrit Server in the event.
	ChangeNumber() int64
	SetChangeNumber(int64)

	// Date when the entity was created. The date is in ISO 8601 with time zone
	CreatedAt() string
	SetCreatedAt(string)

	// The user that created this entity
	CreatedBy() string
	SetCreatedBy(string)

	// Date and time on which this event is created.
	CreatedOn() int64
	SetCreatedOn(int64)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// Index of the Execution.
	ExecutionIndex() int64
	SetExecutionIndex(int64)

	// Link of the execution.
	ExecutionLink() string
	SetExecutionLink(string)

	// Indicates the current status of the Execution.
	ExecutionStatus() string
	SetExecutionStatus(string)

	// Gerrit Project on which the change has happened.
	GerritProject() string
	SetGerritProject(string)

	// The id of this resource.
	ID() string
	SetID(string)

	// Name of the Gerrit Listener which contains details of the Gerrit Server which has sent this event.
	Listener() string
	SetListener(string)

	// This includes detailed message regarding state of the execution.
	Message() string
	SetMessage(string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Required: true
	Name() *string
	SetName(*string)

	// Name and Email details of ChangeSet Owner.
	Owner() string
	SetOwner(string)

	// Patch number of the ChangeSet provided by Gerrit Server in the event.
	PatchSetNumber() int64
	SetPatchSetNumber(int64)

	// Name of the pipeline which got triggered.
	Pipeline() string
	SetPipeline(string)

	// The project this entity belongs to.
	Project() string
	SetProject(string)

	// Map containing all ChangeSet related details.
	Properties() map[string]string
	SetProperties(map[string]string)

	// Contains the commit message.
	Subject() string
	SetSubject(string)

	// Name of the Gerrit Trigger which contains the configuration leading to this event.
	Trigger() string
	SetTrigger(string)

	// Indicates whether it was a manual trigger or not.
	TriggerType() string
	SetTriggerType(string)

	// Type of the gerrit event.
	Type() string
	SetType(string)

	// Date when the entity was last updated. The date is in ISO 8601 with time zone.
	UpdatedAt() string
	SetUpdatedAt(string)

	// The user that last updated this entity
	UpdatedBy() string
	SetUpdatedBy(string)

	// Version of the resource.
	Version() string
	SetVersion(string)
}

type gerritEvent struct {
	createTimeInMicrosField int64

	linkField string

	updateTimeInMicrosField int64

	actionTakenField string

	branchField string

	changeNumberField int64

	createdAtField string

	createdByField string

	createdOnField int64

	descriptionField *string

	executionIndexField int64

	executionLinkField string

	executionStatusField string

	gerritProjectField string

	idField string

	listenerField string

	messageField string

	nameField *string

	ownerField string

	patchSetNumberField int64

	pipelineField string

	projectField string

	propertiesField map[string]string

	subjectField string

	triggerField string

	triggerTypeField string

	typeField string

	updatedAtField string

	updatedByField string

	versionField string
}

// CreateTimeInMicros gets the create time in micros of this polymorphic type
func (m *gerritEvent) CreateTimeInMicros() int64 {
	return m.createTimeInMicrosField
}

// SetCreateTimeInMicros sets the create time in micros of this polymorphic type
func (m *gerritEvent) SetCreateTimeInMicros(val int64) {
	m.createTimeInMicrosField = val
}

// Link gets the link of this polymorphic type
func (m *gerritEvent) Link() string {
	return m.linkField
}

// SetLink sets the link of this polymorphic type
func (m *gerritEvent) SetLink(val string) {
	m.linkField = val
}

// UpdateTimeInMicros gets the update time in micros of this polymorphic type
func (m *gerritEvent) UpdateTimeInMicros() int64 {
	return m.updateTimeInMicrosField
}

// SetUpdateTimeInMicros sets the update time in micros of this polymorphic type
func (m *gerritEvent) SetUpdateTimeInMicros(val int64) {
	m.updateTimeInMicrosField = val
}

// ActionTaken gets the action taken of this polymorphic type
func (m *gerritEvent) ActionTaken() string {
	return m.actionTakenField
}

// SetActionTaken sets the action taken of this polymorphic type
func (m *gerritEvent) SetActionTaken(val string) {
	m.actionTakenField = val
}

// Branch gets the branch of this polymorphic type
func (m *gerritEvent) Branch() string {
	return m.branchField
}

// SetBranch sets the branch of this polymorphic type
func (m *gerritEvent) SetBranch(val string) {
	m.branchField = val
}

// ChangeNumber gets the change number of this polymorphic type
func (m *gerritEvent) ChangeNumber() int64 {
	return m.changeNumberField
}

// SetChangeNumber sets the change number of this polymorphic type
func (m *gerritEvent) SetChangeNumber(val int64) {
	m.changeNumberField = val
}

// CreatedAt gets the created at of this polymorphic type
func (m *gerritEvent) CreatedAt() string {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *gerritEvent) SetCreatedAt(val string) {
	m.createdAtField = val
}

// CreatedBy gets the created by of this polymorphic type
func (m *gerritEvent) CreatedBy() string {
	return m.createdByField
}

// SetCreatedBy sets the created by of this polymorphic type
func (m *gerritEvent) SetCreatedBy(val string) {
	m.createdByField = val
}

// CreatedOn gets the created on of this polymorphic type
func (m *gerritEvent) CreatedOn() int64 {
	return m.createdOnField
}

// SetCreatedOn sets the created on of this polymorphic type
func (m *gerritEvent) SetCreatedOn(val int64) {
	m.createdOnField = val
}

// Description gets the description of this polymorphic type
func (m *gerritEvent) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *gerritEvent) SetDescription(val *string) {
	m.descriptionField = val
}

// ExecutionIndex gets the execution index of this polymorphic type
func (m *gerritEvent) ExecutionIndex() int64 {
	return m.executionIndexField
}

// SetExecutionIndex sets the execution index of this polymorphic type
func (m *gerritEvent) SetExecutionIndex(val int64) {
	m.executionIndexField = val
}

// ExecutionLink gets the execution link of this polymorphic type
func (m *gerritEvent) ExecutionLink() string {
	return m.executionLinkField
}

// SetExecutionLink sets the execution link of this polymorphic type
func (m *gerritEvent) SetExecutionLink(val string) {
	m.executionLinkField = val
}

// ExecutionStatus gets the execution status of this polymorphic type
func (m *gerritEvent) ExecutionStatus() string {
	return m.executionStatusField
}

// SetExecutionStatus sets the execution status of this polymorphic type
func (m *gerritEvent) SetExecutionStatus(val string) {
	m.executionStatusField = val
}

// GerritProject gets the gerrit project of this polymorphic type
func (m *gerritEvent) GerritProject() string {
	return m.gerritProjectField
}

// SetGerritProject sets the gerrit project of this polymorphic type
func (m *gerritEvent) SetGerritProject(val string) {
	m.gerritProjectField = val
}

// ID gets the id of this polymorphic type
func (m *gerritEvent) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *gerritEvent) SetID(val string) {
	m.idField = val
}

// Listener gets the listener of this polymorphic type
func (m *gerritEvent) Listener() string {
	return m.listenerField
}

// SetListener sets the listener of this polymorphic type
func (m *gerritEvent) SetListener(val string) {
	m.listenerField = val
}

// Message gets the message of this polymorphic type
func (m *gerritEvent) Message() string {
	return m.messageField
}

// SetMessage sets the message of this polymorphic type
func (m *gerritEvent) SetMessage(val string) {
	m.messageField = val
}

// Name gets the name of this polymorphic type
func (m *gerritEvent) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *gerritEvent) SetName(val *string) {
	m.nameField = val
}

// Owner gets the owner of this polymorphic type
func (m *gerritEvent) Owner() string {
	return m.ownerField
}

// SetOwner sets the owner of this polymorphic type
func (m *gerritEvent) SetOwner(val string) {
	m.ownerField = val
}

// PatchSetNumber gets the patch set number of this polymorphic type
func (m *gerritEvent) PatchSetNumber() int64 {
	return m.patchSetNumberField
}

// SetPatchSetNumber sets the patch set number of this polymorphic type
func (m *gerritEvent) SetPatchSetNumber(val int64) {
	m.patchSetNumberField = val
}

// Pipeline gets the pipeline of this polymorphic type
func (m *gerritEvent) Pipeline() string {
	return m.pipelineField
}

// SetPipeline sets the pipeline of this polymorphic type
func (m *gerritEvent) SetPipeline(val string) {
	m.pipelineField = val
}

// Project gets the project of this polymorphic type
func (m *gerritEvent) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *gerritEvent) SetProject(val string) {
	m.projectField = val
}

// Properties gets the properties of this polymorphic type
func (m *gerritEvent) Properties() map[string]string {
	return m.propertiesField
}

// SetProperties sets the properties of this polymorphic type
func (m *gerritEvent) SetProperties(val map[string]string) {
	m.propertiesField = val
}

// Subject gets the subject of this polymorphic type
func (m *gerritEvent) Subject() string {
	return m.subjectField
}

// SetSubject sets the subject of this polymorphic type
func (m *gerritEvent) SetSubject(val string) {
	m.subjectField = val
}

// Trigger gets the trigger of this polymorphic type
func (m *gerritEvent) Trigger() string {
	return m.triggerField
}

// SetTrigger sets the trigger of this polymorphic type
func (m *gerritEvent) SetTrigger(val string) {
	m.triggerField = val
}

// TriggerType gets the trigger type of this polymorphic type
func (m *gerritEvent) TriggerType() string {
	return m.triggerTypeField
}

// SetTriggerType sets the trigger type of this polymorphic type
func (m *gerritEvent) SetTriggerType(val string) {
	m.triggerTypeField = val
}

// Type gets the type of this polymorphic type
func (m *gerritEvent) Type() string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *gerritEvent) SetType(val string) {
	m.typeField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *gerritEvent) UpdatedAt() string {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *gerritEvent) SetUpdatedAt(val string) {
	m.updatedAtField = val
}

// UpdatedBy gets the updated by of this polymorphic type
func (m *gerritEvent) UpdatedBy() string {
	return m.updatedByField
}

// SetUpdatedBy sets the updated by of this polymorphic type
func (m *gerritEvent) SetUpdatedBy(val string) {
	m.updatedByField = val
}

// Version gets the version of this polymorphic type
func (m *gerritEvent) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *gerritEvent) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalGerritEventSlice unmarshals polymorphic slices of GerritEvent
func UnmarshalGerritEventSlice(reader io.Reader, consumer runtime.Consumer) ([]GerritEvent, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GerritEvent
	for _, element := range elements {
		obj, err := unmarshalGerritEvent(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGerritEvent unmarshals polymorphic GerritEvent
func UnmarshalGerritEvent(reader io.Reader, consumer runtime.Consumer) (GerritEvent, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGerritEvent(data, consumer)
}

func unmarshalGerritEvent(data []byte, consumer runtime.Consumer) (GerritEvent, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Contains all the details of a Gerrit Event. property.
	var getType struct {
		ContainsAllTheDetailsOfaGerritEvent string `json:"Contains all the details of a Gerrit Event."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Contains all the details of a Gerrit Event.", "body", getType.ContainsAllTheDetailsOfaGerritEvent); err != nil {
		return nil, err
	}

	// The value of Contains all the details of a Gerrit Event. is used to determine which type to create and unmarshal the data into
	switch getType.ContainsAllTheDetailsOfaGerritEvent {
	case "GerritEvent":
		var result gerritEvent
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid Contains all the details of a Gerrit Event. value: %q", getType.ContainsAllTheDetailsOfaGerritEvent)

}

// Validate validates this gerrit event
func (m *gerritEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *gerritEvent) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *gerritEvent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}
