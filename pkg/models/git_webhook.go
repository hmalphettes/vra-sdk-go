// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitWebhook GitWebhook
//
// Git Webhook details.
// swagger:discriminator GitWebhook Git Webhook details.
type GitWebhook interface {
	runtime.Validatable

	// This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds
	CreateTimeInMicros() int64
	SetCreateTimeInMicros(int64)

	// Partial URL that provides details of the resource.
	Link() string
	SetLink(string)

	// This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds
	UpdateTimeInMicros() int64
	SetUpdateTimeInMicros(int64)

	// Branch name for which the webhook has been configured.
	BranchName() string
	SetBranchName(string)

	// Date when the entity was created. The date is in ISO 8601 with time zone
	CreatedAt() string
	SetCreatedAt(string)

	// The user that created this entity
	CreatedBy() string
	SetCreatedBy(string)

	// Delay time after which the Pipeline Execution is triggered.
	DelayTimeInMins() int32
	SetDelayTimeInMins(int32)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// Git endpoint.
	Endpoint() string
	SetEndpoint(string)

	// Git event type.
	EventCategory() string
	SetEventCategory(string)

	// Provide file exclusions as conditions for the trigger.
	Exclusions() []*GitWebhookFileFilter
	SetExclusions([]*GitWebhookFileFilter)

	// Git webhook listener link.
	ExternalListenerLink() string
	SetExternalListenerLink(string)

	// The id of this resource.
	ID() string
	SetID(string)

	// Provide file inclusions as conditions for the trigger.
	Inclusions() []*GitWebhookFileFilter
	SetInclusions([]*GitWebhookFileFilter)

	// Pipeline Execution input properties.
	Input() interface{}
	SetInput(interface{})

	// A human-friendly name used as an identifier in APIs that support this option
	// Required: true
	Name() *string
	SetName(*string)

	// Pipeline name which is meant to be triggered when a git event occur.
	Pipeline() string
	SetPipeline(string)

	// Prioritize Exclusion ensures that pipelines are not triggered even if any of the files in a commit match the specified files in the exclusion paths or regex.
	PrioritizeExclusion() bool
	SetPrioritizeExclusion(bool)

	// The project this entity belongs to.
	Project() string
	SetProject(string)

	// Codestream API token.
	RefreshToken() string
	SetRefreshToken(string)

	// Repo name for which the webhook has been configured.
	RepoName() string
	SetRepoName(string)

	// Secret token to validate received payloads.
	SecretToken() string
	SetSecretToken(string)

	// Git Server Type.
	ServerType() string
	SetServerType(string)

	// Git webhook id.
	ServerWebhookID() string
	SetServerWebhookID(string)

	// Date when the entity was last updated. The date is in ISO 8601 with time zone.
	UpdatedAt() string
	SetUpdatedAt(string)

	// The user that last updated this entity
	UpdatedBy() string
	SetUpdatedBy(string)

	// Version of the resource.
	Version() string
	SetVersion(string)
}

type gitWebhook struct {
	createTimeInMicrosField int64

	linkField string

	updateTimeInMicrosField int64

	branchNameField string

	createdAtField string

	createdByField string

	delayTimeInMinsField int32

	descriptionField *string

	endpointField string

	eventCategoryField string

	exclusionsField []*GitWebhookFileFilter

	externalListenerLinkField string

	idField string

	inclusionsField []*GitWebhookFileFilter

	inputField interface{}

	nameField *string

	pipelineField string

	prioritizeExclusionField bool

	projectField string

	refreshTokenField string

	repoNameField string

	secretTokenField string

	serverTypeField string

	serverWebhookIdField string

	updatedAtField string

	updatedByField string

	versionField string
}

// CreateTimeInMicros gets the create time in micros of this polymorphic type
func (m *gitWebhook) CreateTimeInMicros() int64 {
	return m.createTimeInMicrosField
}

// SetCreateTimeInMicros sets the create time in micros of this polymorphic type
func (m *gitWebhook) SetCreateTimeInMicros(val int64) {
	m.createTimeInMicrosField = val
}

// Link gets the link of this polymorphic type
func (m *gitWebhook) Link() string {
	return m.linkField
}

// SetLink sets the link of this polymorphic type
func (m *gitWebhook) SetLink(val string) {
	m.linkField = val
}

// UpdateTimeInMicros gets the update time in micros of this polymorphic type
func (m *gitWebhook) UpdateTimeInMicros() int64 {
	return m.updateTimeInMicrosField
}

// SetUpdateTimeInMicros sets the update time in micros of this polymorphic type
func (m *gitWebhook) SetUpdateTimeInMicros(val int64) {
	m.updateTimeInMicrosField = val
}

// BranchName gets the branch name of this polymorphic type
func (m *gitWebhook) BranchName() string {
	return m.branchNameField
}

// SetBranchName sets the branch name of this polymorphic type
func (m *gitWebhook) SetBranchName(val string) {
	m.branchNameField = val
}

// CreatedAt gets the created at of this polymorphic type
func (m *gitWebhook) CreatedAt() string {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *gitWebhook) SetCreatedAt(val string) {
	m.createdAtField = val
}

// CreatedBy gets the created by of this polymorphic type
func (m *gitWebhook) CreatedBy() string {
	return m.createdByField
}

// SetCreatedBy sets the created by of this polymorphic type
func (m *gitWebhook) SetCreatedBy(val string) {
	m.createdByField = val
}

// DelayTimeInMins gets the delay time in mins of this polymorphic type
func (m *gitWebhook) DelayTimeInMins() int32 {
	return m.delayTimeInMinsField
}

// SetDelayTimeInMins sets the delay time in mins of this polymorphic type
func (m *gitWebhook) SetDelayTimeInMins(val int32) {
	m.delayTimeInMinsField = val
}

// Description gets the description of this polymorphic type
func (m *gitWebhook) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *gitWebhook) SetDescription(val *string) {
	m.descriptionField = val
}

// Endpoint gets the endpoint of this polymorphic type
func (m *gitWebhook) Endpoint() string {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this polymorphic type
func (m *gitWebhook) SetEndpoint(val string) {
	m.endpointField = val
}

// EventCategory gets the event category of this polymorphic type
func (m *gitWebhook) EventCategory() string {
	return m.eventCategoryField
}

// SetEventCategory sets the event category of this polymorphic type
func (m *gitWebhook) SetEventCategory(val string) {
	m.eventCategoryField = val
}

// Exclusions gets the exclusions of this polymorphic type
func (m *gitWebhook) Exclusions() []*GitWebhookFileFilter {
	return m.exclusionsField
}

// SetExclusions sets the exclusions of this polymorphic type
func (m *gitWebhook) SetExclusions(val []*GitWebhookFileFilter) {
	m.exclusionsField = val
}

// ExternalListenerLink gets the external listener link of this polymorphic type
func (m *gitWebhook) ExternalListenerLink() string {
	return m.externalListenerLinkField
}

// SetExternalListenerLink sets the external listener link of this polymorphic type
func (m *gitWebhook) SetExternalListenerLink(val string) {
	m.externalListenerLinkField = val
}

// ID gets the id of this polymorphic type
func (m *gitWebhook) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *gitWebhook) SetID(val string) {
	m.idField = val
}

// Inclusions gets the inclusions of this polymorphic type
func (m *gitWebhook) Inclusions() []*GitWebhookFileFilter {
	return m.inclusionsField
}

// SetInclusions sets the inclusions of this polymorphic type
func (m *gitWebhook) SetInclusions(val []*GitWebhookFileFilter) {
	m.inclusionsField = val
}

// Input gets the input of this polymorphic type
func (m *gitWebhook) Input() interface{} {
	return m.inputField
}

// SetInput sets the input of this polymorphic type
func (m *gitWebhook) SetInput(val interface{}) {
	m.inputField = val
}

// Name gets the name of this polymorphic type
func (m *gitWebhook) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *gitWebhook) SetName(val *string) {
	m.nameField = val
}

// Pipeline gets the pipeline of this polymorphic type
func (m *gitWebhook) Pipeline() string {
	return m.pipelineField
}

// SetPipeline sets the pipeline of this polymorphic type
func (m *gitWebhook) SetPipeline(val string) {
	m.pipelineField = val
}

// PrioritizeExclusion gets the prioritize exclusion of this polymorphic type
func (m *gitWebhook) PrioritizeExclusion() bool {
	return m.prioritizeExclusionField
}

// SetPrioritizeExclusion sets the prioritize exclusion of this polymorphic type
func (m *gitWebhook) SetPrioritizeExclusion(val bool) {
	m.prioritizeExclusionField = val
}

// Project gets the project of this polymorphic type
func (m *gitWebhook) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *gitWebhook) SetProject(val string) {
	m.projectField = val
}

// RefreshToken gets the refresh token of this polymorphic type
func (m *gitWebhook) RefreshToken() string {
	return m.refreshTokenField
}

// SetRefreshToken sets the refresh token of this polymorphic type
func (m *gitWebhook) SetRefreshToken(val string) {
	m.refreshTokenField = val
}

// RepoName gets the repo name of this polymorphic type
func (m *gitWebhook) RepoName() string {
	return m.repoNameField
}

// SetRepoName sets the repo name of this polymorphic type
func (m *gitWebhook) SetRepoName(val string) {
	m.repoNameField = val
}

// SecretToken gets the secret token of this polymorphic type
func (m *gitWebhook) SecretToken() string {
	return m.secretTokenField
}

// SetSecretToken sets the secret token of this polymorphic type
func (m *gitWebhook) SetSecretToken(val string) {
	m.secretTokenField = val
}

// ServerType gets the server type of this polymorphic type
func (m *gitWebhook) ServerType() string {
	return m.serverTypeField
}

// SetServerType sets the server type of this polymorphic type
func (m *gitWebhook) SetServerType(val string) {
	m.serverTypeField = val
}

// ServerWebhookID gets the server webhook Id of this polymorphic type
func (m *gitWebhook) ServerWebhookID() string {
	return m.serverWebhookIdField
}

// SetServerWebhookID sets the server webhook Id of this polymorphic type
func (m *gitWebhook) SetServerWebhookID(val string) {
	m.serverWebhookIdField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *gitWebhook) UpdatedAt() string {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *gitWebhook) SetUpdatedAt(val string) {
	m.updatedAtField = val
}

// UpdatedBy gets the updated by of this polymorphic type
func (m *gitWebhook) UpdatedBy() string {
	return m.updatedByField
}

// SetUpdatedBy sets the updated by of this polymorphic type
func (m *gitWebhook) SetUpdatedBy(val string) {
	m.updatedByField = val
}

// Version gets the version of this polymorphic type
func (m *gitWebhook) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *gitWebhook) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalGitWebhookSlice unmarshals polymorphic slices of GitWebhook
func UnmarshalGitWebhookSlice(reader io.Reader, consumer runtime.Consumer) ([]GitWebhook, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []GitWebhook
	for _, element := range elements {
		obj, err := unmarshalGitWebhook(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalGitWebhook unmarshals polymorphic GitWebhook
func UnmarshalGitWebhook(reader io.Reader, consumer runtime.Consumer) (GitWebhook, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalGitWebhook(data, consumer)
}

func unmarshalGitWebhook(data []byte, consumer runtime.Consumer) (GitWebhook, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the Git Webhook details. property.
	var getType struct {
		GitWebhookDetails string `json:"Git Webhook details."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("Git Webhook details.", "body", getType.GitWebhookDetails); err != nil {
		return nil, err
	}

	// The value of Git Webhook details. is used to determine which type to create and unmarshal the data into
	switch getType.GitWebhookDetails {
	case "GitWebhook":
		var result gitWebhook
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid Git Webhook details. value: %q", getType.GitWebhookDetails)

}

// Validate validates this git webhook
func (m *gitWebhook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclusions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *gitWebhook) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *gitWebhook) validateExclusions(formats strfmt.Registry) error {

	if swag.IsZero(m.Exclusions()) { // not required
		return nil
	}

	for i := 0; i < len(m.Exclusions()); i++ {
		// hello slicevalidator
		if swag.IsZero(m.exclusionsField[i]) { // not required
			continue
		}

		if m.exclusionsField[i] != nil {
			if err := m.exclusionsField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exclusions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *gitWebhook) validateInclusions(formats strfmt.Registry) error {

	if swag.IsZero(m.Inclusions()) { // not required
		return nil
	}

	for i := 0; i < len(m.Inclusions()); i++ {
		// hello slicevalidator
		if swag.IsZero(m.inclusionsField[i]) { // not required
			continue
		}

		if m.inclusionsField[i] != nil {
			if err := m.inclusionsField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inclusions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *gitWebhook) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}
