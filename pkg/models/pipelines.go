// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pipelines Pipelines
//
// A list of Pipeline instances.
// swagger:discriminator Pipelines A list of Pipeline instances.
type Pipelines interface {
	runtime.Validatable

	// Number of resources within the current page.
	Count() int64
	SetCount(int64)

	// Details of the queried resources.
	Documents() map[string]Pipeline
	SetDocuments(map[string]Pipeline)

	// Partial URLs representing the links to the queried resources.
	Links() []string
	SetLinks([]string)

	// Number of resources across all pages.
	TotalCount() int64
	SetTotalCount(int64)
}

type pipelines struct {
	countField int64

	documentsField map[string]Pipeline

	linksField []string

	totalCountField int64
}

// Count gets the count of this polymorphic type
func (m *pipelines) Count() int64 {
	return m.countField
}

// SetCount sets the count of this polymorphic type
func (m *pipelines) SetCount(val int64) {
	m.countField = val
}

// Documents gets the documents of this polymorphic type
func (m *pipelines) Documents() map[string]Pipeline {
	return m.documentsField
}

// SetDocuments sets the documents of this polymorphic type
func (m *pipelines) SetDocuments(val map[string]Pipeline) {
	m.documentsField = val
}

// Links gets the links of this polymorphic type
func (m *pipelines) Links() []string {
	return m.linksField
}

// SetLinks sets the links of this polymorphic type
func (m *pipelines) SetLinks(val []string) {
	m.linksField = val
}

// TotalCount gets the total count of this polymorphic type
func (m *pipelines) TotalCount() int64 {
	return m.totalCountField
}

// SetTotalCount sets the total count of this polymorphic type
func (m *pipelines) SetTotalCount(val int64) {
	m.totalCountField = val
}

// UnmarshalPipelinesSlice unmarshals polymorphic slices of Pipelines
func UnmarshalPipelinesSlice(reader io.Reader, consumer runtime.Consumer) ([]Pipelines, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Pipelines
	for _, element := range elements {
		obj, err := unmarshalPipelines(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalPipelines unmarshals polymorphic Pipelines
func UnmarshalPipelines(reader io.Reader, consumer runtime.Consumer) (Pipelines, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalPipelines(data, consumer)
}

func unmarshalPipelines(data []byte, consumer runtime.Consumer) (Pipelines, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A list of Pipeline instances. property.
	var getType struct {
		AListOfPipelineInstances string `json:"A list of Pipeline instances."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A list of Pipeline instances.", "body", getType.AListOfPipelineInstances); err != nil {
		return nil, err
	}

	// The value of A list of Pipeline instances. is used to determine which type to create and unmarshal the data into
	switch getType.AListOfPipelineInstances {
	case "Pipelines":
		var result pipelines
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid A list of Pipeline instances. value: %q", getType.AListOfPipelineInstances)

}

// Validate validates this pipelines
func (m *pipelines) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocuments(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *pipelines) validateDocuments(formats strfmt.Registry) error {

	if swag.IsZero(m.Documents()) { // not required
		return nil
	}

	for k := range m.Documents() {

		if err := validate.Required("documents"+"."+k, "body", m.Documents()[k]); err != nil {
			return err
		}
		if val, ok := m.Documents()[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}
