// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Variable Variable
//
// A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc.
// swagger:discriminator Variable A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc.
type Variable interface {
	runtime.Validatable

	// This field is provided for backward compatibility. Contains the same value as the 'createdAt' field as a UNIX timestamp in microseconds
	CreateTimeInMicros() int64
	SetCreateTimeInMicros(int64)

	// Partial URL that provides details of the resource.
	Link() string
	SetLink(string)

	// This field is provided for backward compatibility. Contains the same value as the 'updatedAt' field as a UNIX timestamp in microseconds
	UpdateTimeInMicros() int64
	SetUpdateTimeInMicros(int64)

	// Date when the entity was created. The date is in ISO 8601 with time zone
	CreatedAt() string
	SetCreatedAt(string)

	// The user that created this entity
	CreatedBy() string
	SetCreatedBy(string)

	// A human-friendly description.
	// Required: true
	Description() *string
	SetDescription(*string)

	// The id of this resource.
	ID() string
	SetID(string)

	// A human-friendly name used as an identifier in APIs that support this option
	// Required: true
	Name() *string
	SetName(*string)

	// The project this entity belongs to.
	Project() string
	SetProject(string)

	// The type of this Variable. Ex: REGULAR / SECRET / RESTRICTED
	Type() string
	SetType(string)

	// Date when the entity was last updated. The date is in ISO 8601 with time zone.
	UpdatedAt() string
	SetUpdatedAt(string)

	// The user that last updated this entity
	UpdatedBy() string
	SetUpdatedBy(string)

	// The value for this Variable.
	Value() interface{}
	SetValue(interface{})

	// Version of the resource.
	Version() string
	SetVersion(string)
}

type variable struct {
	createTimeInMicrosField int64

	linkField string

	updateTimeInMicrosField int64

	createdAtField string

	createdByField string

	descriptionField *string

	idField string

	nameField *string

	projectField string

	typeField string

	updatedAtField string

	updatedByField string

	valueField interface{}

	versionField string
}

// CreateTimeInMicros gets the create time in micros of this polymorphic type
func (m *variable) CreateTimeInMicros() int64 {
	return m.createTimeInMicrosField
}

// SetCreateTimeInMicros sets the create time in micros of this polymorphic type
func (m *variable) SetCreateTimeInMicros(val int64) {
	m.createTimeInMicrosField = val
}

// Link gets the link of this polymorphic type
func (m *variable) Link() string {
	return m.linkField
}

// SetLink sets the link of this polymorphic type
func (m *variable) SetLink(val string) {
	m.linkField = val
}

// UpdateTimeInMicros gets the update time in micros of this polymorphic type
func (m *variable) UpdateTimeInMicros() int64 {
	return m.updateTimeInMicrosField
}

// SetUpdateTimeInMicros sets the update time in micros of this polymorphic type
func (m *variable) SetUpdateTimeInMicros(val int64) {
	m.updateTimeInMicrosField = val
}

// CreatedAt gets the created at of this polymorphic type
func (m *variable) CreatedAt() string {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *variable) SetCreatedAt(val string) {
	m.createdAtField = val
}

// CreatedBy gets the created by of this polymorphic type
func (m *variable) CreatedBy() string {
	return m.createdByField
}

// SetCreatedBy sets the created by of this polymorphic type
func (m *variable) SetCreatedBy(val string) {
	m.createdByField = val
}

// Description gets the description of this polymorphic type
func (m *variable) Description() *string {
	return m.descriptionField
}

// SetDescription sets the description of this polymorphic type
func (m *variable) SetDescription(val *string) {
	m.descriptionField = val
}

// ID gets the id of this polymorphic type
func (m *variable) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *variable) SetID(val string) {
	m.idField = val
}

// Name gets the name of this polymorphic type
func (m *variable) Name() *string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *variable) SetName(val *string) {
	m.nameField = val
}

// Project gets the project of this polymorphic type
func (m *variable) Project() string {
	return m.projectField
}

// SetProject sets the project of this polymorphic type
func (m *variable) SetProject(val string) {
	m.projectField = val
}

// Type gets the type of this polymorphic type
func (m *variable) Type() string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *variable) SetType(val string) {
	m.typeField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *variable) UpdatedAt() string {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *variable) SetUpdatedAt(val string) {
	m.updatedAtField = val
}

// UpdatedBy gets the updated by of this polymorphic type
func (m *variable) UpdatedBy() string {
	return m.updatedByField
}

// SetUpdatedBy sets the updated by of this polymorphic type
func (m *variable) SetUpdatedBy(val string) {
	m.updatedByField = val
}

// Value gets the value of this polymorphic type
func (m *variable) Value() interface{} {
	return m.valueField
}

// SetValue sets the value of this polymorphic type
func (m *variable) SetValue(val interface{}) {
	m.valueField = val
}

// Version gets the version of this polymorphic type
func (m *variable) Version() string {
	return m.versionField
}

// SetVersion sets the version of this polymorphic type
func (m *variable) SetVersion(val string) {
	m.versionField = val
}

// UnmarshalVariableSlice unmarshals polymorphic slices of Variable
func UnmarshalVariableSlice(reader io.Reader, consumer runtime.Consumer) ([]Variable, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Variable
	for _, element := range elements {
		obj, err := unmarshalVariable(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalVariable unmarshals polymorphic Variable
func UnmarshalVariable(reader io.Reader, consumer runtime.Consumer) (Variable, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalVariable(data, consumer)
}

func unmarshalVariable(data []byte, consumer runtime.Consumer) (Variable, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc. property.
	var getType struct {
		AVariableIsUsedToStoreReUsableSensitiveStringsWithinCodeStreamInAnEncryptedFormatSoAsToBeAbleToConsumeInOtherAreasLikeEndpointPipelineTaskOrStageEtc string `json:"A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc."`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc.", "body", getType.AVariableIsUsedToStoreReUsableSensitiveStringsWithinCodeStreamInAnEncryptedFormatSoAsToBeAbleToConsumeInOtherAreasLikeEndpointPipelineTaskOrStageEtc); err != nil {
		return nil, err
	}

	// The value of A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc. is used to determine which type to create and unmarshal the data into
	switch getType.AVariableIsUsedToStoreReUsableSensitiveStringsWithinCodeStreamInAnEncryptedFormatSoAsToBeAbleToConsumeInOtherAreasLikeEndpointPipelineTaskOrStageEtc {
	case "Variable":
		var result variable
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid A Variable is used to store re-usable/sensitive strings within Code Stream in an encrypted format so as to be able to consume in other areas like Endpoint, Pipeline, Task or Stage etc. value: %q", getType.AVariableIsUsedToStoreReUsableSensitiveStringsWithinCodeStreamInAnEncryptedFormatSoAsToBeAbleToConsumeInOtherAreasLikeEndpointPipelineTaskOrStageEtc)

}

// Validate validates this variable
func (m *variable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *variable) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description()); err != nil {
		return err
	}

	return nil
}

func (m *variable) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}
